<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>whaso&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-03T09:27:29.919Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>WHASO</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>go从入门到放弃</title>
    <link href="http://example.com/2023/06/30/go%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    <id>http://example.com/2023/06/30/go%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</id>
    <published>2023-06-30T03:59:24.000Z</published>
    <updated>2023-07-03T09:27:29.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-基础"><a href="#一-基础" class="headerlink" title="一. 基础"></a>一. 基础</h1><ul><li>编译型语言<ul><li>定义：在程序运行之前，源代码会先经过编译器将其转换为机器语言的形式，生成可执行文件。在运行时，计算机直接执行该可执行文件，无需再进行翻译或解释。C、C++ 和 Java 等语言属于编译型语言。</li><li>白话定义：只有第一次执行的时候需要编译,之后如果没修改源代码就不会再编译了</li><li>示例：C++、Go、Java</li></ul></li><li>解释型语言<ul><li>定义：在程序运行时，源代码逐行解释并执行。解释器将源代码转换为机器语言，并逐行执行代码。解释型语言的代码无需编译，可以直接运行，但由于需要逐行解释执行，相对于编译型语言，解释型语言的执行速度通常较慢。</li><li>白话定义：每次运行都会从第一行进行编译,编译一行执行一行</li><li>示例：Python、JavaScript、Ruby</li></ul></li><li>静态语言<ul><li>如果在编译时知道变量的类型, 则为静态类型语言. 优点是编译器可以执行各种检查, 程序没跑起来就能找到一些小错误</li><li>示例：C++、Go、Java</li></ul></li><li>动态语言<ul><li>定义：在运行期间过才去做数据类型检查的语言, 在用动态语言编程时, 不用给变量指定数据类型, 该语言会丰第一次赋值给变量时, 在内部将数据类型记录下来, 不必每次都指定类型</li><li>示例：Python, PHP,  JavaScript</li></ul></li><li>强类型<ul><li>定义：为所有变量指定数据类型称之为”强类型”, 不允许两种不同类型的变量相互操作</li><li>示例：Python, Go, Java, C#</li></ul></li><li>弱类型<ul><li>定义：也称为弱类型定义语言, 一个变量可以赋不同数据类型的值, 允许将一块内存看做多种类型, 比如直接将整型变量与字符变量相加</li><li>示例：C, C++, JavaScript, PHP</li></ul></li></ul><h2 id="1-基中基"><a href="#1-基中基" class="headerlink" title="1. 基中基"></a>1. 基中基</h2><blockquote><p>在 Python 中，要实现并发编程，通常需要使用特定的库或框架，如 threading、multiprocessing、asyncio 等。这些库提供了线程、进程、协程等抽象，用于实现并发任务的调度和执行。Python 的标准库提供了一些基本的并发工具，但在处理大规模并发时可能需要使用更高级的第三方库。</p><p>而在 Go 中，原生的 Goroutine 和调度器提供了并发编程的内置支持，不需要依赖额外的框架或库。Goroutine 是 Go 语言提供的一种轻量级的并发执行单元，通过使用关键字 <code>go</code> 来启动 Goroutine，无需额外的线程或进程管理。调度器会自动将 Goroutines 调度到可用的系统线程上执行，并进行高效的并发调度。</p><p>由于 Goroutines 是 Go 语言内部的机制，Go 运行时系统负责管理 Goroutines 的创建、调度和销毁，使得并发编程在 Go 中变得非常简单和高效。此外，Go 还提供了通道（Channel）作为 Goroutines 之间进行通信和同步的机制，进一步简化了并发编程的复杂性。</p><p>总结:  Go 在语言本身就提供了原生的并发支持，使用 Goroutine 和调度器实现轻量级的并发编程。相比之下，Python 需要借助额外的库或框架来处理并发任务，并且在处理大规模并发时可能需要使用更高级的工具。</p><p>Goroutine 是 Go 语言中并发编程的核心概念之一，它是一种轻量级的执行单元。每个 Goroutine 都是一个独立的执行线程，可以与其他 Goroutines 并发地执行。</p><p>Goroutine 可以看作是一种比传统线程更轻量级、更高效的并发编程抽象。与传统的线程相比，Goroutine 的创建和销毁开销很小，可以高效地创建大量的 Goroutines。这使得在 Go 语言中可以方便地使用大量的 Goroutines 来实现并发任务，而不会消耗过多的系统资源。</p><p>使用 Goroutines 的一个重要特点是它们之间的切换开销非常低。由于 Goroutines 是由 Go 调度器（Scheduler）管理的，调度器可以在 Goroutines 之间非常高效地进行切换，以实现并发执行。当一个 Goroutine 遇到阻塞操作（例如等待 I&#x2F;O 完成或休眠）时，调度器会自动切换到其他可执行的 Goroutine，以充分利用系统资源。</p><p>另一个重要特点是 Goroutines 之间可以通过通道（Channel）进行通信和同步。通道是 Goroutines 之间安全地传递数据的机制，可以用于在不同的 Goroutines 之间进行数据交换和共享。</p><p>通过使用 Goroutines，开发者可以将任务并发地划分为多个独立的执行单元，每个执行单元由一个 Goroutine 来处理。这样可以简化并发编程的复杂性，并充分发挥多核处理器的性能优势。</p><p>总结: Goroutine 是 Go 语言中的一种轻量级并发执行单元，它提供了高效的并发编程抽象。通过使用 Goroutines，开发者可以方便地实现并发任务，并充分利用多核处理器的性能。同时，通过通道的机制，Goroutines 可以安全地进行通信和同步，实现高效的并发编程。</p></blockquote><h3 id="1-1-编译器下载安装"><a href="#1-1-编译器下载安装" class="headerlink" title="1.1. 编译器下载安装"></a>1.1. 编译器下载安装</h3><blockquote><p>官网：<a href="https://golang.org/dl/">https://golang.org/dl/</a></p></blockquote><ul><li>mac<ul><li>下载*.pkg直接安装 默认安装目录 <code>/usr/local/go</code></li><li>添加**&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin**目录到环境变量 <code>export PATH=$PATH:/usr/local/go/bin</code></li></ul></li></ul><h3 id="1-2-Hello-World"><a href="#1-2-Hello-World" class="headerlink" title="1.2. Hello World"></a>1.2. Hello World</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main <span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;   </span><br><span class="line">  fmt.Printf(<span class="string">&quot;Hello, Go\n&quot;</span>) </span><br><span class="line">&#125; <span class="comment">/* main 是入口, 名固定不能改 */</span></span><br><span class="line"></span><br><span class="line">$ <span class="keyword">go</span> build hello.<span class="keyword">go</span> </span><br><span class="line">$./hello </span><br><span class="line"></span><br><span class="line">&gt;&gt; Hello, Go</span><br></pre></td></tr></table></figure><ul><li>package main 包声名, 必须在源文件非注释第一行声名这个文件属于哪个包, 每个Go程序都必须有一个名为 main 的包</li><li>import “fmt” 导入包, 表示这个程序需要”fmt”包, 注: “fmt” go的格式化输入输出包</li><li>func main() {} go的第一个程序都必须有一个main函数, 这是程序入口, go程序执行顺序: init -&gt; main -&gt; 其他, 没有init就main最先执行</li></ul><p>*<em>注: 当标识符以大写字母开头</em>***（包括常量、变量、类型、函数名、结构字段等等）表示可被外部包使用, 以小写字母开头表示不可被外部包使用(但对包内部是可用的)</p><h3 id="1-3-基础"><a href="#1-3-基础" class="headerlink" title="1.3. 基础"></a>1.3. 基础</h3><ul><li><p>注释</p><ul><li><code>//</code> 单行注释</li><li><code> /*</code> 多行注释 <code>*/</code></li></ul></li><li><p>标识符: 由字母, 数字, 下划线构成, 不能数字开头, 不能是go的关键字</p></li><li><p>关键字:</p></li></ul><blockquote><p>官方文档：<a href="https://go.dev/ref/spec#Keywords">https://go.dev/ref/spec#Keywords</a></p></blockquote><table><thead><tr><th>关键字</th><th>涉及功能</th></tr></thead><tbody><tr><td>select, case, if, else, switch, default</td><td>逻辑判断</td></tr><tr><td></td><td>异常捕获</td></tr><tr><td>for, continue, break, return</td><td>循环</td></tr><tr><td>import, package,</td><td>导包</td></tr><tr><td>func, interface</td><td>定义</td></tr><tr><td></td><td>异步</td></tr><tr><td></td><td>变量空间</td></tr><tr><td>, select, defer, go, map, struct, chan, goto, range, type, const, fallthrough, var</td><td>其他</td></tr></tbody></table><ul><li>预定义标识符:</li></ul><table><thead><tr><th>标识符</th><th>含义</th></tr></thead><tbody><tr><td>bool, true, false</td><td>布尔类型， 真，假</td></tr><tr><td>byte</td><td>alias for uint8</td></tr><tr><td>rune</td><td>alias for int32</td></tr><tr><td>int, int8, int16, int32, int64</td><td>整数类型关键字, 有符号整数类型的不同位数</td></tr><tr><td>uint, uint8, uint16, uint32, uint64</td><td>无符号整数类型的关键字, 无符号整数类型的不同位数</td></tr><tr><td>uintptr</td><td>用于存储指针值的整数类型</td></tr><tr><td>float32, float64</td><td>浮点数类型的不同精度</td></tr><tr><td>complex32, complex64</td><td>复数类型的不同精度</td></tr><tr><td>string</td><td>字符串类型的关键字</td></tr><tr><td>error</td><td>表示错误类型的接口</td></tr><tr><td>make</td><td>用于创建切片、映射和通道的内建函数</td></tr><tr><td>new</td><td>用于分配内存的内建函数</td></tr><tr><td>append</td><td>用于向切片追加元素的内建函数</td></tr><tr><td>len</td><td>用于返回切片、数组、字典、字符串或通道的长度的内建函数</td></tr><tr><td>cap</td><td>对于切片或容量为数组、切片或通道的内建函数，返回其容量</td></tr></tbody></table><h3 id="1-4-数据类型"><a href="#1-4-数据类型" class="headerlink" title="1.4. 数据类型"></a>1.4. 数据类型</h3><ul><li>布尔: true &#x2F; false</li><li>数字: uint8 &#x2F; uint16 &#x2F; uint32 &#x2F; uint64 (无符号 0-255-65535-…) &#x2F; int8 &#x2F; int16 &#x2F; float32 &#x2F; float64 ( -128-127 -32768 - 32768 .. ..)</li><li>字符串: utf-8</li><li>派生类型:</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-基础&quot;&gt;&lt;a href=&quot;#一-基础&quot; class=&quot;headerlink&quot; title=&quot;一. 基础&quot;&gt;&lt;/a&gt;一. 基础&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;编译型语言&lt;ul&gt;
&lt;li&gt;定义：在程序运行之前，源代码会先经过编译器将其转换为机器语言的形式，生成可执行文</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python从入门到放弃</title>
    <link href="http://example.com/2023/06/30/python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    <id>http://example.com/2023/06/30/python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</id>
    <published>2023-06-30T03:14:42.000Z</published>
    <updated>2023-07-11T08:10:49.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-基础"><a href="#一-基础" class="headerlink" title="一. 基础"></a>一. 基础</h1><ul><li>编译型语言<ul><li>定义：在程序运行之前，源代码会先经过编译器将其转换为机器语言的形式，生成可执行文件。在运行时，计算机直接执行该可执行文件，无需再进行翻译或解释。C、C++ 和 Java 等语言属于编译型语言。</li><li>白话定义：只有第一次执行的时候需要编译,之后如果没修改源代码就不会再编译了</li><li>示例：C++、Go、Java</li></ul></li><li>解释型语言<ul><li>定义：在程序运行时，源代码逐行解释并执行。解释器将源代码转换为机器语言，并逐行执行代码。解释型语言的代码无需编译，可以直接运行，但由于需要逐行解释执行，相对于编译型语言，解释型语言的执行速度通常较慢。</li><li>白话定义：每次运行都会从第一行进行编译,编译一行执行一行</li><li>示例：Python、JavaScript、Ruby</li></ul></li></ul><h2 id="1-基中基"><a href="#1-基中基" class="headerlink" title="1. 基中基"></a>1. 基中基</h2><h3 id="1-1-关键字"><a href="#1-1-关键字" class="headerlink" title="1.1. 关键字"></a>1.1. 关键字</h3><table><thead><tr><th>关键字</th><th>涉及功能</th></tr></thead><tbody><tr><td>True, False, None</td><td>真 假 空</td></tr><tr><td>if, elif, else, and, not, assert, or, is, in</td><td>逻辑判断</td></tr><tr><td>try, except, finally, raise</td><td>异常捕获</td></tr><tr><td>for, while, continue, break, return</td><td>循环</td></tr><tr><td>from, import</td><td>导包</td></tr><tr><td>def, class, lambda</td><td>定义函数、类、匿名函数</td></tr><tr><td>async, await, yield</td><td>异步</td></tr><tr><td>global, nonlocal</td><td>变量空间</td></tr><tr><td>as, del, pass, with, type</td><td>重命名、删除、PASS、上下文、类型</td></tr></tbody></table><h3 id="1-2-逻辑运算符"><a href="#1-2-逻辑运算符" class="headerlink" title="1.2. 逻辑运算符"></a>1.2. 逻辑运算符</h3><ul><li>与 <code>and</code>: 一假即假</li><li>或 <code>or</code>: 一真即真（注意短路逻辑： <code>1 or 1 / 0</code> 不会报错，程序只会走第一个1然后就会执行下一行）</li><li>非 <code>not</code>: 真假取反</li></ul><h3 id="1-3-比较运算符"><a href="#1-3-比较运算符" class="headerlink" title="1.3. 比较运算符"></a>1.3. 比较运算符</h3><ul><li><p><code>//</code> 取整除 9 &#x2F;&#x2F; 4 &#x3D; 2</p></li><li><p><code>%</code> 取余 9%4 &#x3D; 1</p></li><li><p><code>^</code>   取异或  把数字转化为二进制取  0 1 为 1 ，1 0 为 1， 1 1 为1， 0 0 为 0</p></li><li><p><code>**</code>  幂</p></li></ul><h3 id="1-4-比较运算符"><a href="#1-4-比较运算符" class="headerlink" title="1.4. 比较运算符"></a>1.4. 比较运算符</h3><ul><li><p><code>&gt; &lt; == != &gt;= &lt;=</code></p></li><li><p>返回的结果都是bool类型, True表示条件成立, False表示不成立.</p></li></ul><h3 id="1-5-输入输出"><a href="#1-5-输入输出" class="headerlink" title="1.5. 输入输出"></a>1.5. 输入输出</h3><ul><li><p><code>print()</code> 调用底层的<code>sys.stdout.write</code>方法，前往控制台打印输出</p></li><li><p><code>input()</code>  无论输入什么类型的数据，都会转化为字符串</p></li></ul><h3 id="1-6-循环"><a href="#1-6-循环" class="headerlink" title="1.6. 循环"></a>1.6. 循环</h3><ul><li><p>循环语句结合<code>else</code>语句使用，当循环语句执行了<code>break</code>表示非正常结束，<code>else</code>语句不会执行，否则会执行<code>else</code>语句</p></li><li><p>循环语句里有<code>break/return</code>时, <code>break/return</code>执行了, <code>else</code>语句就不会执行</p></li><li><p><code>break/continue</code> 只影响一层循环</p></li></ul><h3 id="1-7-if三目运算"><a href="#1-7-if三目运算" class="headerlink" title="1.7. if三目运算"></a>1.7. if三目运算</h3><ul><li><p><code>a if a &gt; b else b</code> 条件成立取a，不成立取b</p></li><li><p>if 除了判断bool类型, 还可以判断</p><ul><li>容器类型(字符串, 列表, 元组, 字典, 集合, <code>range()</code>, <code>bytes()</code>) 判断是否有数据</li><li>非零即真(只要不是0, 条件都成立)</li><li>None 条件不成立, not none, 表示非空, 条件成立</li></ul></li></ul><h3 id="1-8-注释"><a href="#1-8-注释" class="headerlink" title="1.8 注释"></a>1.8 注释</h3><ul><li>单行 <code># 这是注释</code></li><li>多行 <code>&quot;&quot;&quot; 这是多行注释 &quot;&quot;&quot;</code></li></ul><h2 id="2-容器"><a href="#2-容器" class="headerlink" title="2. 容器"></a>2. 容器</h2><h3 id="2-1-字符串"><a href="#2-1-字符串" class="headerlink" title="2.1. 字符串"></a>2.1. 字符串</h3><blockquote><p><strong>字符串用<code>join</code>比直接<code>+</code>高效原因</strong>：在 Python 中，字符串是不可变类型，这意味着一旦我们创建了一个字符串对象，它就不能被修改或更新。因此，每次使用 <code>+</code> 操作符拼接字符串时，都会创建一个新的字符串对象，并将之前字符串对象的内容复制到新的字符串对象中，这个复制的操作会带来额外的内存分配和内存拷贝的开销，特别是在需要拼接大量的字符串时，会消耗大量的系统资源，导致程序运行缓慢。 相对地，使用 <code>join()</code> 方法的拼接字符串操作则更加高效。<code>join()</code> 方法本质上是将多个字符串通过指定的分隔符拼接在一起，而与此相关的方法包括 <code>split()</code>，<code>replace()</code> 和 <code>format()</code> 等方法，它们均采用类似的算法。在 <code>join()</code> 方法的实现中，Python 的解释器会先在内存中分配一个足够大的单个字符串缓冲区，然后扫描要拼接的字符串，将其复制到单个缓冲区中，并在不同字符串之间插入指定的分隔符。这种方法可以有效地避免频繁创建或拷贝字符串对象，从而提高拼接字符串的效率。 此外，<code>join()</code> 方法还可以接受一个可迭代对象作为参数，如列表，元组，生成器等，它们会返回一个字符串，其中可迭代对象按照指定的分隔符进行拼接。这种方式具有更高的灵活性和实用性，因为它可以用于拼接任意数量的字符串，而且可以用于迭代较大的数据集合，而不会导致系统资源消耗过多。</p></blockquote><ul><li>定义：用单引号、双引号、三引号均可，仅三引号可以换行</li><li>切片：<code>[开始位置:结束位置:步长]</code> 左闭右开<ul><li><code>[::-1]</code> 字符串快速逆置</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_str = <span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="built_in">isinstance</span>(my_str, <span class="built_in">str</span>)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">my_age = <span class="number">18</span></span><br><span class="line"><span class="built_in">isinstance</span>(my_age, <span class="built_in">int</span>)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">my_age = <span class="built_in">str</span>(my_age)  <span class="comment"># &quot;18&quot;</span></span><br><span class="line"><span class="built_in">isinstance</span>(my_age, <span class="built_in">str</span>)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p><strong>常用</strong></p><ul><li><code>.find(要查询的字符, 查询开始索引, 查询结束索引)</code> 左闭右开，查空返回 -1</li><li><code>.replace(str1, str2, 替换次数)</code> 字符串替换，替换次数默认-1全部替换</li><li><code>.split(str1, 切片次数)</code> 字符串以 str1 为分隔符进行切片，切片次数默认-1全部切，返回分隔后的列表</li><li><code>.lower()</code> 英文转小写 <code>upper()</code>转大写</li></ul><h3 id="2-2-列表"><a href="#2-2-列表" class="headerlink" title="2.2. 列表"></a>2.2. 列表</h3><p><strong>定义</strong>：<code>[]</code> 或 <code>list()</code> </p><p><strong>列表推导式</strong>： 列表中可以包含条件语句，表示筛选符合条件的元素。在这种情况下，底层逻辑还会涉及以下步骤：</p><ol><li>创建一个空列表。</li><li>对于列表推导式中的每个元素表达式，按照迭代顺序依次执行以下步骤：<ol><li>在当前作用域中计算元素表达式的值。</li><li>如果条件表达式的值为真，则将计算得到的值添加到列表中。</li></ol></li><li>返回最终生成的列表。</li></ol><p><strong>增</strong></p><ul><li><code>.append</code> 加整个对象，加字典也是整个字典</li><li><code>.extend</code> 打散加进去，加字典默认加字典的<code>key</code></li><li><code>.insert(index, obj)</code> 在指定位置前面加, 是整个加进去的</li></ul><p><strong>删</strong></p><ul><li><p><code>del list[::]</code> 可以和切片一起操作根据索引删除列表元素</p></li><li><p><code>.pop()</code> 只能根据单独索引删除对应元素, 默认删最后一个, 会返回删除的元素</p></li><li><p><code>.remove()</code> 指定元素删除</p></li></ul><p><strong>改</strong></p><p><code>list[index] = &quot;new&quot;</code>  可以用切片同时更改多个数据,注意下面示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list = [<span class="number">1</span>, <span class="string">&quot;2&quot;</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list[<span class="number">0</span>] = <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list[:<span class="number">0</span>] = <span class="string">&quot;456&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list</span><br><span class="line">[<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list[:<span class="number">2</span>] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><strong>查</strong></p><ul><li><code>in</code> 判断是否存在，只可判断最外层数据，内层还有容器要索引进去查</li><li><code>.index(obj, start, end)</code> 左闭右开，找不到报<code>ValueError</code></li><li><code>.count(obj)</code></li></ul><p><strong>排序</strong></p><ul><li><p><code>.sort(reverse=False)</code> 默认是从小到大, <code>reverse=True</code> 改为从大到小</p></li><li><p><code>.reverse()</code> 将列表逆置, 与上面的<code>reverse=True</code>不同</p></li></ul><h3 id="2-3-元组"><a href="#2-3-元组" class="headerlink" title="2.3. 元组"></a>2.3. 元组</h3><p><strong>定义</strong>：<code>tuple()</code> 或 <code>(1, 2)</code>  如果只有一个元素, 逗号不能省略, 有序</p><h3 id="2-4-字典"><a href="#2-4-字典" class="headerlink" title="2.4. 字典"></a>2.4. 字典</h3><p><strong>定义</strong></p><ul><li><code>dict()</code> 或 <code>&#123;&quot;a&quot;: 1, &quot;b&quot;: 2&#125;</code></li><li><code>zip</code>组合<code>key</code>和<code>value</code> 生成字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>keys = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>values = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_dict = <span class="built_in">dict</span>(<span class="built_in">zip</span>(keys, values))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_dict</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>增:</strong>   </p><ul><li><code>dict[key] = value</code></li></ul><p><strong>删:</strong>   </p><ul><li><p><code>del dict[key]</code>  必须要有<code>key</code>数据</p></li><li><p><code>.pop(key, default)</code>  必须要有<code>key</code>数据, 会返回所删项的<code>value</code>, 如果字典里没有这个<code>key</code>就会返回<code>default</code></p></li><li><p><code>.popitem()</code>  takes no arguments, return the last item as a tuple()</p></li><li><p><code>.clear()</code> 清空</p></li></ul><p><strong>改:</strong>  </p><ul><li><code>dict[key] = value</code>  和增加元素相同, 所以当原本没有此<code>key</code>就变成增加元素了</li></ul><p><strong>查:</strong>   </p><ul><li><p><code>dict[key]</code>  如果不存在会报错</p></li><li><p><code>.get(key, default)</code>   如果不存在则返回<code>default</code>  不写<code>default</code>找不到会返回<code>None</code> 不会报错</p></li></ul><p><strong>合并:</strong>  </p><ul><li><code>dict1.update(dict2)</code>  把字典2的每个键值对数据合并到字典1中, 如果有重复的则更新1的内容</li></ul><p><strong>遍历:</strong> </p><ul><li><code>for key in dict.keys()</code></li><li><code>for values in dict.values()</code></li><li><code>for item in dict.items()</code>           <strong>item是个tuple</strong></li><li><code>for key, value in dict.items()</code>         遍历 + 拆包</li></ul><p><strong>排序：</strong></p><ul><li><code>sorted(d.items(), key=lambda x : x[0/1])</code></li></ul><h3 id="2-5-集合"><a href="#2-5-集合" class="headerlink" title="2.5. 集合"></a>2.5. 集合</h3><ul><li>集合是一个容器类型, 可以存储多个数据, 但是多个数据不能重复</li><li>集合只能存储不可变类型数据, 也就是: 数字, 字符串, 元组    同字典的key</li><li>空集合不能使用**{}**来表示, {}是字典, 创建时用 <strong>set()</strong> 来创建空集合</li><li>遍历集合不能用通过下标, 可以用for遍历, 可迭代对象</li></ul><p><strong>特点:</strong></p><ol><li>无序, so集合不能通过索引获取数据和通过索引修改数据</li><li>数据不能重复,数据是唯一的</li><li>可变类型</li></ol><p><strong>操作符：</strong></p><p><strong>^</strong>  补  {1，2} ^ {2, 3}  &#x3D;&gt;  {1, 3}</p><p><strong>&amp;</strong> 交  {1，2} &amp; {2, 3}  &#x3D;&gt;  {2, }</p><p><strong>|</strong>   并   {1，2} | {2, 3}  &#x3D;&gt;  {1, 2, 3}</p><p><strong>-</strong>   差   {1，2} - {2, 3}  &#x3D;&gt;  {1, }</p><p><strong>增:</strong></p><p>.<strong>add()</strong> 重复的数据只保留一个</p><p><strong>删:</strong></p><p><strong>.remove(value)</strong> 指定数据删除</p><h3 id="2-6-公共方法"><a href="#2-6-公共方法" class="headerlink" title="2.6. 公共方法"></a>2.6. 公共方法</h3><table><thead><tr><th>运算符</th><th>Python 表达式</th><th>结果</th><th>描述</th><th>支持的数据类型</th></tr></thead><tbody><tr><td>+</td><td>[1, 2] + [3, 4]</td><td>[1, 2, 3, 4]</td><td>合并</td><td>字符串、列表、元组</td></tr><tr><td>*</td><td>[‘Hi!’] * 4</td><td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td>复制</td><td>字符串、列表、元组</td></tr><tr><td>in</td><td>3 in (1, 2, 3)</td><td>True</td><td>元素是否存在</td><td>字符串、列表、元组、字典</td></tr><tr><td>not in</td><td>4 not in (1, 2, 3)</td><td>True</td><td>元素是否不存在</td><td>字符串、列表、元组、字典</td></tr></tbody></table><p><strong>python内置函数</strong></p><ul><li><p><code>len()</code>  获取容器的元素数量</p></li><li><p><code>max()</code>  返回容器中元素最大值  |  类似的 <code>min()</code>  最小</p></li><li><p><code>enumerate()</code> </p><ul><li>在使用for循环的时候可以遍历数据又可以遍历索引, 列表&#x2F;元组&#x2F;字典都可以使用</li><li>当用于字典遍历所有items时返回的是一个索引数据和一个元组</li></ul></li></ul><h3 id="2-7-可变不可变类型"><a href="#2-7-可变不可变类型" class="headerlink" title="2.7. 可变不可变类型"></a>2.7. 可变不可变类型</h3><p>不可变类型</p><ul><li>定义：不允许在原本内存空间基础上修改数据, 修改数据后内存地址会发生变化</li><li>示例：列表, 字典, 集合</li></ul><p>可变类型</p><ul><li>定义：允许在原本内存空间修改数据，修改后一是在原有内存空间基础上修改数据内存不变，二是重新赋值内存地址可能发生变化</li><li>示例：数字, 字符串, 元组</li></ul><h2 id="3-函数"><a href="#3-函数" class="headerlink" title="3. 函数"></a>3. 函数</h2><blockquote><p>程序中定义的变量都是保存在内存中的, 局部变量也是, 当函数执行结束后局部变量都会销毁,内存释放</p></blockquote><h3 id="3-1-文档说明"><a href="#3-1-文档说明" class="headerlink" title="3.1. 文档说明"></a>3.1. 文档说明</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; func docs &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># &#x27;&#x27;&#x27; others &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;life is short i use python&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line"><span class="built_in">help</span>(show)</span><br><span class="line"><span class="comment"># life is short i use python</span></span><br><span class="line"><span class="comment"># Help on function show in module __main__:</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># show()</span></span><br><span class="line"><span class="comment">#     func docs</span></span><br></pre></td></tr></table></figure><h3 id="3-2-返回值"><a href="#3-2-返回值" class="headerlink" title="3.2. 返回值"></a>3.2. 返回值</h3><ul><li>函数不写<code>return</code> 取函数返回值时会取到 <code>None</code></li><li>在多层循环中 <code>return</code> 可把多层全部终止，<code>break</code> 只能终止一层</li></ul><h3 id="3-3-局部变量-amp-全局变量"><a href="#3-3-局部变量-amp-全局变量" class="headerlink" title="3.3. 局部变量&amp;全局变量"></a>3.3. 局部变量&amp;全局变量</h3><ul><li><p>局部变量：作用域仅在函数体内部,  随着函数执行结束会销毁</p></li><li><p>全局变量：在函数体内外都生效，不会随着函数执行结束会销毁</p></li><li><p><code>global</code> 本质是表示:  要修改全局变量的内存地址, 所以只有不可变类型需要<code>global</code></p></li><li><p>在函数内部使用全局变量时, 要先声明 <code>global</code> 全局变量, 如果是可变类型就不需要了</p></li><li><p>对于操作全局变量的数据, 如果是通过重新赋值来完成的, 那么必须加上<code>global</code>关键字</p></li><li><p><code>nonlocal</code> 使用场景是函数嵌套时，内层函数要使用外层函数的变量或参数</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = [<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t</span>():</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    b.append(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(a, b)</span><br><span class="line"></span><br><span class="line">t()</span><br><span class="line"><span class="built_in">print</span>(a, b)</span><br><span class="line"><span class="comment"># 2 [1, 2]</span></span><br><span class="line"><span class="comment"># 2 [1, 2]</span></span><br></pre></td></tr></table></figure><h3 id="3-4-函数参数"><a href="#3-4-函数参数" class="headerlink" title="3.4. 函数参数"></a>3.4. 函数参数</h3><ul><li><p>分类</p><ul><li><p>位置参数：按照位置顺序依次给函数的参数传值</p></li><li><p>关键字参数：按照关键字名给函数的参数传值</p></li></ul><p>注：前面按位置, 后面按关键字, 如果前面用了关键字参数, 后面不能再使用位置参数, 只能使用关键字参数传参</p></li><li><p>不定长参数: 函数的参数个数不确定, 可能0个, 可能多个</p><ul><li>不定长位置参数, <code>*args</code>, 调用函数时所有位置参数都封装成元组, 赋值给<code>args</code></li><li>不定长关键字参数, <code>**kwargs</code>, 调用函数时所有关键字参数都封装成字典, 赋值给<code>kwargs</code></li></ul><p>注: <code>*args</code> 和 <code>**kwargs</code> 这两个参数名可以修改, 但一般不改, 大家习惯了</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">name, *args, age=<span class="number">18</span>, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;name:&quot;</span>, name, <span class="string">&quot;age:&quot;</span>, age, <span class="string">&quot;args:&quot;</span>, args, <span class="string">&quot;kwargs:&quot;</span>, kwargs)</span><br><span class="line">show(<span class="string">&quot;李四&quot;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;a&quot;</span>, a=<span class="number">1</span>, b=<span class="number">2</span>, age=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># name: 李四 age: 20 args: (1, 2, &#x27;a&#x27;) kwargs: &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>拆包</strong>：使用不同变量保存容器类型中的每个数据，对应的变量和数据数量要保持一致致</p><ul><li><p>容器类型如:字符串, 列表, 元组, 字典, range, 集合(set) 都可以利用拆包, 容器类型可以使用变量保存不同的数据</p></li><li><p><code>*my_tuple</code>: 对元组&#x2F;列表进行拆包, 也就是把元组&#x2F;列表里每个数据按位置参数进行传参</p></li><li><p><code>**my_dict</code>: 对字典进行拆包, 也就是把字典里面的每一个键值对按关键字的方式进行传参</p></li></ul></li></ul><h3 id="3-5-匿名函数"><a href="#3-5-匿名函数" class="headerlink" title="3.5. 匿名函数"></a>3.5. 匿名函数</h3><p>定义：没有名字的函数, 就是匿名函数, 匿名函数返回值不需要 <code>return</code>，用<code> lambda</code> 定义</p><p>格式:  <code>lambda [形参1], [形参2], ... : [单行表达式] 或 [函数调用]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_func = <span class="keyword">lambda</span> a: <span class="built_in">print</span>(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_func(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><h3 id="3-6-常见函数定义"><a href="#3-6-常见函数定义" class="headerlink" title="3.6. 常见函数定义"></a>3.6. 常见函数定义</h3><ul><li>递归函数: 在一个函数内调用的是函数本身, 这样的函数称为递归函数</li><li>函数嵌套：python中, 可以在函数内部再定义一个函数, 称为函数的嵌套（例：装饰器）</li><li>高阶函数：函数的参数或者返回值是一个函数类型, 那么这样的函数就叫高阶函数（例：装饰器）</li></ul><h2 id="4-文件"><a href="#4-文件" class="headerlink" title="4. 文件"></a>4. 文件</h2><h3 id="4-1-常识"><a href="#4-1-常识" class="headerlink" title="4.1. 常识"></a>4.1. 常识</h3><ul><li><p>在windows的python解释器里面, 打开文件默认的编码格式是 <code>gbk</code> 的</p></li><li><p>在mac和linux的解释器里面, 打开文件默认的编码格式是 <code>utf-8</code> 的</p></li><li><p><code>utf-8</code> 一个汉字占用三个字节, 一个字母占1个字节</p></li><li><p>编码:  <code>.encode(&quot;utf-8&quot;)</code></p></li><li><p>解码:  <code>.decode(&quot;utf-8&quot;)</code></p></li></ul><h2 id="5-面向对象"><a href="#5-面向对象" class="headerlink" title="5. 面向对象"></a>5. 面向对象</h2><blockquote><p>面向对象就是对面向过程的封装</p><p><strong>面向对象的三大特性</strong></p><p><strong>封装:</strong> 把属性和方法放到类里面的操作就是封装, 封装可以控制属性和方法的访问权限</p><p><strong>继承:</strong> 子类可以使用父类的方法或者属性, 提高了代码的复用性, 注意点: 父类的功能满足不了子类的需要, 重写父类的方法</p><p><strong>多态:</strong> </p><ul><li>对象调用同一个方法会出现不同的表现形式(表现结果)</li><li>多态的好处, 代码的可扩展性强, 代码兼容性强, 不关系类型, 只关系对象是否具有指定功能方法</li></ul></blockquote><h3 id="5-0-类的实例化过程"><a href="#5-0-类的实例化过程" class="headerlink" title="5.0. 类的实例化过程"></a>5.0. 类的实例化过程</h3><ol><li><p>内存分配：Python为对象分配所需的内存空间。</p></li><li><p>初始化实例：调用类的__init__方法来初始化实例。__init__方法是类中一个特殊的方法，它在实例化对象时被自动调用。</p></li><li><p>创建对象引用：创建一个指向该实例的引用，允许你通过变量来访问该实例。</p></li><li><p>执行__new__方法（可选）：如果定义了__new__方法，它将在__init__之前被调用。__new__方法负责创建实例。</p></li><li><p>返回实例：返回一个指向新实例的引用，使你可以使用该引用来操作该实例。</p></li></ol><p>总结起来，实例化一个类时，Python会为对象分配内存空间，然后调用__init__方法初始化实例，最后返回新实例的引用。这样，就可以通过该引用来操作和访问该实例的属性和方法。</p><h3 id="5-1-魔法方法"><a href="#5-1-魔法方法" class="headerlink" title="5.1. 魔法方法"></a>5.1. 魔法方法</h3><p><strong>定义</strong>：方法名前后都有两个下划线, 这样的方法称为魔法方法, 魔法方法具有一定的特殊功能</p><p><strong>常见魔法方法</strong>：</p><ul><li><p><code>__new__</code> 分配内存的方法, 在<code>__init__</code>之前调用</p></li><li><p><code>__init__</code>, 在创建一个对象时默认被调用,不需要手动调用, 可以在此方法内添加对象属性</p></li><li><p><code>__del__</code>, 创建对象后, python解释器默认调用<code>__init__</code>方法, 当删除对象时, python解释器也会默认调用<code>__del__</code>方法</p></li><li><p><code>__str__</code>, 当使用<code>print</code>输出对象的时候, 默认打印对象的内存地址, 如果类定义了此方法,那么就会打印从在这个方法中<code>return</code>的数据, 此方法返回必须是字符串类型, 作为这个对象的描述信息. </p></li><li><p><code>__slots__</code>方法, 限定自定义类型的的对象只能绑定某些属性, 只对当前类对象生效, 对子类并不起任何作用</p></li><li><p><code>__enter__</code>表示上文方法，需要返回一个操作文件对象</p></li><li><p><code>__exit__</code>表示下文方法，with语句执行完成会自动执行，即使出现异常也会执行该方法</p></li></ul><p><strong>对象销毁的方式</strong>:</p><ul><li><p>程序运行结束, 程序中所使用对象都要在内存中销毁</p></li><li><p>当对象没有变量使用的时候, 该对象就会被销毁, 引用计数为0时会销毁</p></li></ul><h3 id="5-2-继承"><a href="#5-2-继承" class="headerlink" title="5.2. 继承"></a>5.2. 继承</h3><p><strong>语法</strong>：<code>class 子类名(父类名):</code>  &#x2F; <code>class 子类名(父类1, 父类2):</code></p><p><strong>说明</strong>：子类复用父类里面的属性或方法,  提高代码的复用性,  能够使用父类里面的方法或者属性, 包括<code>__init__</code>方法</p><p><strong>常识：</strong></p><ul><li><p>父类也称为基类,  子类也称为派生类</p></li><li><p>单继承：子类只继承一个父类</p></li><li><p>多继承：子类继承多个父类, 可以使用多个父类里的方法</p><ul><li><code>.mro()</code>  方法可查看类的继承顺序</li></ul></li><li><p>多层继承：只要有类继承关系, 子类对父类及所有上层父类的方法都可以使用</p></li><li><p>继承后方法的调用：先从本类查找, 依次往后查找, 找到就停, 如果没找到对应方法, 程序崩溃</p></li><li><p>重写：子类继承父类, 对父类的功能方法进行重新改造（子类方法名要和父类方法名相同）</p></li></ul><p><strong>子类调用父类方法：</strong></p><ul><li><p><code>self.方法()</code> : 当子类没有这个方法时候才可以用, 子类有相同方法时用<code>父类的类名.方法(self)</code></p></li><li><p><code>父类的类名.方法(self)</code> :  类名调用对象方法, 需要自己手动传入self参数, 对象调用对象方法, 不需要传self参数</p></li><li><p><code>super().方法()</code> :  <code>super</code>是一个类, <code>super()</code>表示创建了一个父类对象, 通过<code>__init__</code>方法给对象添加属性 </p><ul><li><p>完整写法 <code>super(子类名称, self).父类方法()</code>  : 指定类名, 根据子类获取对应父类</p></li><li><p>super本质: 根据指定类 在类的继承顺序**类名.mro()**中获取下一个类, 然后调用下一个类的方法, 如果是单继承, super的调用可以认为是调用的是父类的方法</p></li></ul></li></ul><h3 id="5-3-私有权限"><a href="#5-3-私有权限" class="headerlink" title="5.3. 私有权限"></a>5.3. 私有权限</h3><ol><li>在属性名和方法名前加两个下划线</li><li>私有属性和私有方法只能在本类中使用, 不能在类外部使用</li><li>其实私有属性及方法只是对属性名和方法名进行了包装, 把名字进行了修改</li><li>总结: 私有属性和方法 的包装格式: 在属性名和方法名前面加 <code>_本类类名__</code></li><li>子类无法使用父类的私有属性和私有方法, 也是把名字做了包装, 同上</li><li>给对象添加私有属性只能在<code>__init__</code>方法里面完成</li></ol><h3 id="5-4-类属性和实例属性"><a href="#5-4-类属性和实例属性" class="headerlink" title="5.4. 类属性和实例属性"></a>5.4. 类属性和实例属性</h3><ul><li><p><strong>类属性</strong>: 在类的内部init方法外部定义的属性, 类属性属于类</p></li><li><ul><li><strong>私有类属性</strong>: 类名前加两个下划线, 也是把名字做了包装, 实际同对象的私有</li></ul></li><li><p><strong>实例属性</strong>: 在init方法内部定义的属性称为实例属性, 实例属性属于实例  (实例 &#x3D;&#x3D; 对象)</p></li><li><p><strong>类不能访问对象属性, 但是对象可以访问类属性(对象不能修改类属性, 只能类去修改)</strong></p></li><li><p><strong>总结</strong>: 对象属性的操作是由对象完成, 类属性操作由类来完成, 只不过对象可以访问类属性(也可以用 <strong>self.<strong>class</strong>.类属性</strong> 修改类属性, 用class找到类然后是类去修改类属性), 类不能访问对象属性</p></li></ul><h3 id="5-5-类中方法的种类"><a href="#5-5-类中方法的种类" class="headerlink" title="5.5. 类中方法的种类"></a>5.5. 类中方法的种类</h3><ul><li><p><strong>实例方法</strong>: 方法的第一个参数是self, 那么这样的方法就是对象方法, self表示当前对象, 实例方法, 类不能调用</p></li><li><p><strong>类方法</strong>(修改和获取类的私有属性时使用): 方法第一参数cls并且还需要使用<code>@classmethod</code>的关键字进行修饰, cls表示当前类, 类方法可以获取和修改类的私有属性, 类方法类和对象都可以调用</p></li><li><p><strong>静态方法</strong>: 方法里没有self和cls参数并且还需要使用<code>@staticmethod</code>的关键字进行修饰</p></li></ul><h2 id="6-异常-amp-模块"><a href="#6-异常-amp-模块" class="headerlink" title="6. 异常&amp;模块"></a>6. 异常&amp;模块</h2><h3 id="6-1-异常"><a href="#6-1-异常" class="headerlink" title="6.1. 异常"></a>6.1. 异常</h3><p><strong>异常捕获<code> try...except...</code></strong></p><ul><li><code>try</code> 表示尝试执行可能出问题的代码, <code>except</code> 表示如果代码出现异常, 进行捕获 <code>as e:</code></li><li>捕获异常类型的通用写法就是用<code>Exception</code>,  因为大多数异常类型都是最终继承<code>Exception</code>的</li><li><code>BaseException</code> 可以捕获任何异常</li></ul><p><strong><code>try...except...else...finally</code></strong></p><ul><li><code>except</code> 与 <code>else</code> 互斥,  <code>finally</code>不管有没有异常都执行</li></ul><p><strong>异常的传递</strong></p><ul><li>当执行代码的时候遇到错误, 首先判断当前代码块对异常进行捕获, 如果没有, 那么再把异常一层一层往外传递, 如果外界的都没对异常的捕获, 程序就会崩溃, 如果有异常捕获, 就不会崩溃了</li></ul><p><strong>自定义异常</strong></p><ul><li>class定义自定义异常类, 必须继承<code>Exception</code>或者<code>BaseException</code>才可以</li><li>抛出自定义异常使用关键字<code>raise</code></li><li>注意:raise只能抛出异常类的对象</li></ul><h3 id="6-2-模块"><a href="#6-2-模块" class="headerlink" title="6.2. 模块"></a>6.2. 模块</h3><p> <strong>通俗理解模块就是一个 .py 文件, 模块里面可以定义具体的功能代码(类, 函数, 全局变量, 匿名函数等等)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看导入模块的搜索路径 </span></span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sys.path)       </span><br></pre></td></tr></table></figure><ul><li>模块好比一个工具箱, 模块里的每一个具体代码好比一个工具</li><li>模块的命名规则和变量名的命名规则一样 使用下划线命名</li><li>模块名的组成和变量名组成一样, 字母, 数字, 下划线开头, 如果以数字开头, 这个模块就不能使用了</li></ul><p><strong>导入模块的两种方式</strong></p><ul><li>import 模块名  as 别名</li><li>from 模块名 import 功能代码(函数, 类, 全局变量)   as 别名</li><li>from 模块名 import *  导入模块里所有功能代码 一般不这样使用</li></ul><p><strong>导入模块注意点</strong></p><ul><li>自制的模块名不要和系统的模块重名</li><li>使用from 模块名 import 功能, 在当前模块不要再定义导入功能的代码, 否则会覆盖之前导入功能代码</li></ul><p><strong>自制模块</strong></p><ul><li><strong>all</strong> 指定导入对应的功能代码  <strong>all</strong> &#x3D; [类名, 类名…..]  all定义针对外界使用from 模块名 import * 导入,  只能导入all里面指定的功能代码</li></ul><p><strong>主模块名字</strong>: <strong>main</strong>  </p><p><strong>导入的模块名字</strong>:  就是模块原本的名字</p><p><strong>包:</strong> <strong>通俗理解只要文件夹里包含一个__init__.py文件, 那么这个文件夹就是包</strong></p><ul><li><p>包的作用: 包是用来管理不同模块的 </p></li><li><p>模块的作用: 模块是用来管理不同功能代码的</p></li><li><p>包名的命名规则和变量名一样, 使用下划线命名法</p></li><li><p>包名的组成和变量名的组成一样, 数字, 字母, 下划线 不能数字开头</p></li><li><p><strong>包的特点</strong>:</p></li><li><ul><li>包里面有一个__init__.py文件,这是包的初始化文件, 当且仅当第一次导入包的时候会执行这个文件</li><li><strong>init</strong>.py 其实就是包的象征文件</li><li><strong>init</strong>.py 可以控制模块的导入行为</li><li><strong>init</strong>.py 可以定义类, 函数, 全局变量等代码</li></ul></li></ul><p><strong>包的导入目的使用包里面的模块</strong></p><p><strong>格式</strong>: </p><ul><li>import 包名  指定导入包, 用包调用模块, 使用模块中的功能代码 第一次导入包的时候会默认调用__init__.py  </li><li>import 包名.模块名</li><li>from 包名 import 模块名</li><li>from 包名 import 模块名 as 模块别名</li><li>from 包名 import *      默认不是导入包里所有模块, 需要在__init__.py中使用__all__去指定</li></ul><h1 id="二-高级"><a href="#二-高级" class="headerlink" title="二. 高级"></a>二. 高级</h1><h2 id="1-多任务"><a href="#1-多任务" class="headerlink" title="1. 多任务"></a>1. 多任务</h2><h3 id="1-1-常识"><a href="#1-1-常识" class="headerlink" title="1.1. 常识"></a>1.1. 常识</h3><ul><li><p>多任务的目的：充分利用CPU资源，提高执行效率</p></li><li><p>时间片：内核分配给程序执行的一小段时间，这个时间内进程拥有cpu资源</p></li><li><p>同步：协同步调，按预定的先后次序进行运行。如：你说完，我再说</p></li><li><p>进程、线程同步：可理解为进程或线程A和B一块配合，A执行到一定程度时要依靠B的某个结果，于是停下来，示意B运行; B执行，再将结果给A; A再继续操作</p></li><li><p>进程状态: 等待状态不占用时间片, 即使时间片有剩余也会退出不占用CPU资源, 只有运行状态才占用CPU资源</p><p><img src="/..%5Cimages%5Cimage-20230704132442670.png" alt="image-20230704132442670"></p></li></ul><h3 id="1-2-执行形式"><a href="#1-2-执行形式" class="headerlink" title="1.2. 执行形式"></a>1.2. 执行形式</h3><ul><li>并发：在一个时间段内，交替的执行多个任务，任务数 &gt; CPU核心数，时间片轮转</li><li>并行：在一个时间点，多核CPU同时执行多个任务，任务数 &lt; CPU核心数</li><li>一般情况下，并发和并行同时存在</li></ul><h3 id="1-3-实现方式：进程"><a href="#1-3-实现方式：进程" class="headerlink" title="1.3. 实现方式：进程"></a>1.3. 实现方式：进程</h3><ul><li><strong>进程是操作系统进行资源(CPU、内存)分配的基本单位</strong></li><li>程序中至少有一个进程，这个进程称为主进程</li><li>主进程会等待所有子进程执行结束再结束<ul><li>如果子进程没执行完，主进程会一直等待，此时如果子进程进入死循环会导致主进程无法退出解决办法：<ul><li>设置子进程为守护主进程，主进程退出时子进程直接销毁: <code>sub_process.daemon = True</code></li><li>主进程退出前先销毁子进程: <code>sub_process.terminate()</code></li></ul></li></ul></li><li>每个进程中至少有一个线程，这个线程称为主线程</li><li>进程间不共享全局变量</li><li>进程之间执行也是无序的，由操作系统调度决定</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进程创建子进程时程序会复制一份代码去跑(也就是说操作系统会再次进行资源分配，所以创建出来的子进程所拥有的内存是和创建它的进程的内存是不同的，所以不可能共享全局变量)</span></span><br><span class="line"><span class="comment"># 打印全局变量id可发现变量的内存地址是不同的</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_list = []  <span class="comment"># 列表可变类型，为全局变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_val</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;reading list: <span class="subst">&#123;my_list&#125;</span>, id: <span class="subst">&#123;<span class="built_in">id</span>(my_list)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_val</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        my_list.append(i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;writed.....<span class="subst">&#123;my_list&#125;</span>, id: <span class="subst">&#123;<span class="built_in">id</span>(my_list)&#125;</span>&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建子进程时：linux和mac不会拷贝主进程执行的代码，但windows会拷贝主进程代码并执行，所以对windows来说创建子进程的代码会发生递归执行而报错，需要把此部分代码放在__name__ == &quot;__main__&quot;判断下（判断主模块的代码只会执行一次），linux和mac就不需要</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    read_task = multiprocessing.Process(target=read_val)</span><br><span class="line">    write_task = multiprocessing.Process(target=write_val)</span><br><span class="line"></span><br><span class="line">    write_task.start()</span><br><span class="line">    read_task.start()</span><br></pre></td></tr></table></figure><h3 id="1-4-实现方式：线程"><a href="#1-4-实现方式：线程" class="headerlink" title="1.4. 实现方式：线程"></a>1.4. 实现方式：线程</h3><ul><li>线程是进程中执行代码的一个分支，每个线程想到执行代码需要CPU进行调度</li><li><strong>线程是CPU调度的基本单位</strong>，每个进程至少有一个线程，称为主线程</li><li>主线程会等待所有子线程结束再结束<ul><li><code>sub_thread.setDaemon(True)</code></li><li><code>threading.Thread(target=task, daemon=True)</code></li></ul></li><li>线程执行时无序的, 谁抢到CPU, 谁就执行</li><li>线程之间共享全局变量，因为在同一进程里面，所以使用的内存资源是相同的，这会导致数据错乱问题，解决方案<ul><li>线程等待 <code>sub_thread.join()</code></li><li>互斥锁：对共享数据进行锁定，保证同一时刻只有一个线程操作共享数据</li><li>以上两种方法都是把多任务改成单任务去执行，保证了数据的准确性，但执行效率会下降</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">name</span>):</span><br><span class="line">    cur_thread = threading.current_thread()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;sing: <span class="subst">&#123;cur_thread&#125;</span>\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;singing <span class="subst">&#123;name&#125;</span>... \n&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>():</span><br><span class="line">    cur_thread = threading.current_thread()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;dance: <span class="subst">&#123;cur_thread&#125;</span>\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;dancing... \n&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tutorial0</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;线程无序&quot;&quot;&quot;</span></span><br><span class="line">    main_thread = threading.current_thread()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;main thread: <span class="subst">&#123;main_thread&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sing_thread = threading.Thread(target=sing, args=(<span class="string">&quot;正月十八&quot;</span>, ))</span><br><span class="line">    dance_thread = threading.Thread(target=dance)</span><br><span class="line"></span><br><span class="line">    sing_thread.start()</span><br><span class="line">    dance_thread.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程之间共享全局变量</span></span><br><span class="line">g_list = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_data</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        g_list.append(i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;added, <span class="subst">&#123;g_list&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_data</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;read data <span class="subst">&#123;g_list&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tutorial1</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;线程共享全局变量&quot;&quot;&quot;</span></span><br><span class="line">    add_thread = threading.Thread(target=add_data)</span><br><span class="line">    read_thread = threading.Thread(target=read_data)</span><br><span class="line"></span><br><span class="line">    add_thread.start()</span><br><span class="line">    read_thread.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_num0</span>():</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100_0000</span>):</span><br><span class="line">        <span class="keyword">global</span> g_num  <span class="comment"># int不可变要用全局需要声名</span></span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;add0: <span class="subst">&#123;g_num&#125;</span>&quot;</span>)</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_num1</span>():</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100_0000</span>):</span><br><span class="line">        <span class="keyword">global</span> g_num  <span class="comment"># int不可变要用全局需要声名</span></span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;add1: <span class="subst">&#123;g_num&#125;</span>&quot;</span>)</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tutorial2</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;数据保护&quot;&quot;&quot;</span></span><br><span class="line">    thread0 = threading.Thread(target=add_num0)</span><br><span class="line">    thread1 = threading.Thread(target=add_num1)</span><br><span class="line"></span><br><span class="line">    thread0.start()</span><br><span class="line">    <span class="comment"># thread0.join()  # 线程等待 在0执行完再向下执行</span></span><br><span class="line">    thread1.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tutorial2()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-5-实现方式：协程"><a href="#1-5-实现方式：协程" class="headerlink" title="1.5. 实现方式：协程"></a>1.5. 实现方式：协程</h3><p><strong>迭代器 Iterator</strong></p><ul><li>可迭代对象(Iterable)定义：包含 <code>__iter__</code> 方法<ul><li>可迭代对象不一定是迭代器，但迭代器一定是可迭代对象</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断一个对象是否可迭代</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line"><span class="built_in">isinstance</span>(A, Iterable)</span><br></pre></td></tr></table></figure><ul><li>迭代器定义：包含 <code>__iter__</code> 和 <code>__next__</code> 方法<ul><li>迭代是访问集合元素的一种方式</li><li>迭代器是一个可以记住遍历位置的对象</li><li>迭代器对象从集合第一个元素开始访问，直到所有元素被访问结束</li><li>迭代器只能往前不能后退</li><li>迭代器可以节省内存空间，实现循环</li></ul></li><li>迭代器优点：存放生成数据的实现方式而不是具体数据，占用很少的内存空间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable, Iterator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassIterator</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, obj</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.obj = obj</span><br><span class="line">        self.cur_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.cur_num &gt;= <span class="built_in">len</span>(self.obj.names):</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">        res = self.obj.names[self.cur_num]</span><br><span class="line">        self.cur_num += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Classmate</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.names = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.names.append(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;想要一个对象称为一个 可迭代对象, 即可以用for遍历</span></span><br><span class="line"><span class="string">        必须要有此方法</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> ClassIterator(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># iter返回self</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fibonacci</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nums</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.nums = nums</span><br><span class="line">        self.cur_num = <span class="number">0</span></span><br><span class="line">        self.a = <span class="number">0</span></span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.cur_num &gt;= <span class="built_in">len</span>(self.nums):</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        </span><br><span class="line">        res = self.a</span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        self.cur_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    classmate = Classmate()</span><br><span class="line"></span><br><span class="line">    classmate.add(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line">    classmate.add(<span class="string">&quot;zoo&quot;</span>)</span><br><span class="line">    classmate.add(<span class="string">&quot;yoo&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># iter方法会自动调用__iter__方法接收返回值, 其返回值就是迭代器也就是ClassIterator类创建的对象就是迭代器</span></span><br><span class="line">    classmate_iterator = <span class="built_in">iter</span>(classmate)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">isinstance</span>(classmate_iterator, Iterator))  <span class="comment"># 判断是否是迭代器 True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> classmate:</span><br><span class="line">        <span class="built_in">print</span>(i)  <span class="comment"># foo zoo yoo</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">isinstance</span>(classmate, Iterable))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>生成器 Generator</strong></p><ul><li>生成器是一种特殊的迭代器</li><li>如果一个函数中有<code>yield</code>语句，那么这个函数就不再是函数，而是一个生成器模板</li><li>定义：生成器推导式<ul><li>列表推导式：<code>[i for i in range(3)]</code><ul><li>把列表推导式的<code>[]</code> 改为 <code>()</code> 返回的就是一个生成器</li></ul></li></ul></li><li>生成器的启动：让生成器从断点处继续执行，即唤醒生成器<ul><li><code>next()</code>第几次启动都可以，但不能传参</li><li><code>obj.send(param)</code> 需要传参时使用，不能第一次启动时使用</li></ul></li><li>获取生成器数据用 <code>next(generator)</code>方法</li><li>生成器数据全部取出后再次使用<code>next()</code>方法会报<code>StopIteration</code>错误</li><li><code>yield</code>关键字有两个作用<ul><li>保存当前运行状态，暂停执行，将生成器挂起</li><li>将<code>yield</code>关键字后面表达式的值作为返回值返回，此时类似<code>return</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_num</span>(<span class="params">cnt</span>):</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    cur_num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> cur_num &lt; cnt:</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        cur_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">gen_obj = create_num(<span class="number">10</span>)  <span class="comment"># 此时创建了一个生成器对象</span></span><br><span class="line"><span class="built_in">print</span>(gen_obj)  <span class="comment"># &lt;generator object create_num at 0x0000022C5899D510&gt;</span></span><br><span class="line"><span class="built_in">print</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> gen_obj])  <span class="comment"># [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>协程 Coroutine</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用greenlet</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t1</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----------A----------&quot;</span>)</span><br><span class="line">        gr2.switch()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t2</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----------B----------&quot;</span>)</span><br><span class="line">        gr1.switch()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">gr1 = greenlet(t1)</span><br><span class="line">gr2 = greenlet(t2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gr1, gr2)</span><br><span class="line">gr2.switch()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;greenlet.greenlet object at 0x00000276263C30F0 (otid=0x00000276263A9EE0) pending&gt; &lt;greenlet.greenlet object at 0x00000276263C31A0 (otid=0x00000276263C7040) pending&gt;</span></span><br><span class="line"><span class="string">----------B----------</span></span><br><span class="line"><span class="string">----------A----------</span></span><br><span class="line"><span class="string">----------B----------</span></span><br><span class="line"><span class="string">----------A----------</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用gevent碰到延时就切换到其他的greenlet去运行</span></span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">monkey.patch_all()</span><br></pre></td></tr></table></figure><h3 id="1-6-不同实现方式对比"><a href="#1-6-不同实现方式对比" class="headerlink" title="1.6. 不同实现方式对比"></a>1.6. 不同实现方式对比</h3><ul><li>进程是资源分配的基本单位，切换需要资源最大，效率很低</li><li>线程是操作系统调度的基本单位，切换需要的资源一般，效率一般(不考虑GIL的情况下)</li><li>协程切换任务需要的资源很小，效率高</li><li>多进程、多线程根据CPU核数不同可能是并行的，协程在一个线程中所以一定是并发的</li></ul><h3 id="1-7-GIL锁"><a href="#1-7-GIL锁" class="headerlink" title="1.7. GIL锁"></a>1.7. GIL锁</h3><blockquote><p>GIL（全局解释器锁）是一个在CPython解释器中的锁，用于确保同一时刻只有一个线程执行Python字节码。这是由于CPython的内存管理机制并不是线程安全的，因此GIL可以防止多个线程同时访问、修改同一块内存，从而避免了可能出现的数据竞争和内存错误。但同时，GIL也限制了Python多线程并行性能，在一些密集计算和多线程CPU密集型任务场景中表现不及其他语言和并发框架。</p></blockquote><blockquote><p>CPython解释器的内存管理机制是基于引用计数的垃圾回收，即对象被引用一次计数器加一，对象引用被释放计数器减一，当计数器变为0时，对象被回收。这种内存管理机制并不是线程安全的，因为多个线程可能同时访问和修改同一块内存，从而导致计数器不一致，或者对象被销毁多次，或者内存泄漏等问题。因此，为了避免这些问题，CPython引入了GIL锁来确保同一时刻只有一个线程执行Python字节码，从而保证内存管理的线程安全性。</p></blockquote><blockquote><p> CPython（即C实现的Python解释器）的内存管理机制在默认情况下并不是线程安全的，这是由于全局解释器锁（Global Interpreter Lock，GIL）所导致的。 GIL是一种机制，确保每个时刻只有一个线程执行Python字节码。这个锁的存在是为了简化CPython的设计实现，因为锁的存在可以防止多个线程同时访问和修改Python对象的内部数据结构，从而提供了一种简单而有效的线程安全保证机制。 由于GIL的存在，当多个线程同时运行Python代码时，它们必须相互竞争获取全局解释器锁。这意味着在进行CPU密集型任务时，多线程并不能充分利用多核心处理器的优势。 而在内存管理方面，CPython使用引用计数机制进行内存的自动分配和释放。每个Python对象都有一个引用计数器，用于跟踪对象的引用数量。但是，由于GIL的存在，多个线程同时修改对象的引用计数可能会导致竞争条件和不一致性，从而破坏了线程安全性。 虽然CPython提供了一些线程安全的数据结构和锁机制（如<code>threading</code>模块的<code>Lock</code>类），但因为GIL的存在，多线程Python代码的执行效率并不能获得明显提升。 值得注意的是，其他实现的Python解释器，如Jython和IronPython，并不使用全局解释器锁，因此在多线程环境中可能具有更好的性能和线程安全性。</p></blockquote><ul><li>全局解释器锁</li><li>保证同一时间, 只有一个线程使用CPU, 不管主子线程</li><li>GIL的存在导致, python中只有进程是可以并行的, 多线程实际也是并发的</li><li>一个进程有一个GIL锁</li><li>GIL不是python的特性, 只是CPython解释器的概念, 历史遗留问题</li></ul><p>现不及其他语言和并发框架。</p><p>  <strong>GIL锁什么时候释放</strong></p><ul><li>当前线程执行超时后会释放</li><li>当前线程阻塞操作时会自动释放(input, io&#x2F;输入输出)</li><li>当前执行完成时</li></ul><p>  <strong>GIL的弊端</strong></p><ul><li>GIL对计算密集型的程序会产生影响。因为计算密集型的程序，需要占用系统资源。</li><li>GIL的存在，相当于始终在进行单线程运算，这样自然就慢了。</li><li>IO密集型影响不大的原因在于，IO，input&#x2F;output，这两个词就表明程序的瓶颈在于输入所耗费的时间，线程大部分时间在等待，所以它们是多个一起等（多线程）还是单个等（单线程）无所谓的。</li></ul><p>  <strong>解决方案：</strong></p><p>  要提升多线程执行效率，解决方案：</p><ul><li>更换解释器</li><li>改为进程替换多线程</li><li>子线程使用C语言实现（绕过GIL锁）</li></ul><p>  <strong>必须要知道的是：</strong></p><ul><li>CPU 密集(计算密集)型不太适合多线程</li><li>I&#x2F;O 密集型适合多线程&#x2F;协程（Gil锁会释放）</li></ul><h2 id="2-高级语法"><a href="#2-高级语法" class="headerlink" title="2. 高级语法"></a>2. 高级语法</h2><h3 id="2-1-闭包-amp-装饰器"><a href="#2-1-闭包-amp-装饰器" class="headerlink" title="2.1. 闭包&amp;装饰器"></a>2.1. 闭包&amp;装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;闭包</span></span><br><span class="line"><span class="string">定义：函数嵌套的前提下，内部函数使用了外部函数的变量或参数，外部函数返回内部函数</span></span><br><span class="line"><span class="string">作用：保存外部函数内的变量, 不会随着外部函数调用结束而销毁，但消耗内存!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outter0</span>(<span class="params">a</span>):</span><br><span class="line">    local_a = <span class="string">&quot;world&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">b</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;inner: <span class="subst">&#123;a&#125;</span>, <span class="subst">&#123;b&#125;</span> <span class="subst">&#123;local_a&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t0</span>():</span><br><span class="line">    foo = outter0(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line">    foo(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">    goo = outter0(<span class="string">&quot;goo&quot;</span>)</span><br><span class="line">    goo(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># inner: foo, hello world</span></span><br><span class="line">    <span class="comment"># inner: goo, hello world</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outter1</span>(<span class="params">a=<span class="number">10</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;outter: <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">b=<span class="number">10</span></span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> a</span><br><span class="line">        a = a + b  <span class="comment"># 此时默认是是取local vars不声名nonlocal会报UnboundLocalError</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;inner a: <span class="subst">&#123;a&#125;</span>, b: <span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t1</span>():</span><br><span class="line">    f = outter1()</span><br><span class="line">    f()</span><br><span class="line">    <span class="comment"># outter: 10</span></span><br><span class="line">    <span class="comment"># inner a: 20, b: 10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">装饰器：本质就是一个闭包函数（但要求闭包函数有且只有一个参数, 参数必须是函数类型）</span></span><br><span class="line"><span class="string">装饰器的执行事件是加载模块事立即执行 (在函数定义时候执行了), 所以一般外部函数内不写其他东西, 只有内部函数</span></span><br><span class="line"><span class="string">特点：</span></span><br><span class="line"><span class="string">    - 不修改已有函数的源代码</span></span><br><span class="line"><span class="string">    - 不修改已有函数的调用方式</span></span><br><span class="line"><span class="string">    - 给已有函数增加额外的功能</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通用装饰器(inner的参数为 *args, **kwargs也就是接收任意参数)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outter2</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;inner: <span class="subst">&#123;args, kwargs&#125;</span>&quot;</span>)</span><br><span class="line">        res = f(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;inner: <span class="subst">&#123;res&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@outter2  </span><span class="comment"># 相当于执行了这句代码：func = outter2(func)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">a, b, c=<span class="number">3</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;func: <span class="subst">&#123;a, b, c, d&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t2</span>():</span><br><span class="line">    func2(<span class="number">1</span>, <span class="number">2</span>, d=<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># inner: ((1, 2), &#123;&#x27;d&#x27;: 5&#125;)</span></span><br><span class="line">    <span class="comment"># func: (1, 2, 3, 5)</span></span><br><span class="line">    <span class="comment"># inner: hello world</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带有参数的装饰器：装饰器外再加一层闭包</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outter3</span>(<span class="params">flag=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">outter2</span>(<span class="params">f</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="comment"># 此时只是打印flag, 没修改不可变类型，不需要声名nonlocal</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;inner: <span class="subst">&#123;args, kwargs&#125;</span>, <span class="subst">&#123;flag=&#125;</span>&quot;</span>)</span><br><span class="line">            res = f(*args, **kwargs)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;inner: <span class="subst">&#123;res&#125;</span>, <span class="subst">&#123;flag=&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> outter2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@outter3(<span class="params"><span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func3</span>(<span class="params">a, b, c=<span class="number">3</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;func: <span class="subst">&#123;a, b, c, d&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t3</span>():</span><br><span class="line">    func3(<span class="number">1</span>, <span class="number">2</span>, d=<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># inner: ((1, 2), &#123;&#x27;d&#x27;: 4&#125;), flag=True</span></span><br><span class="line">    <span class="comment"># func: (1, 2, 3, 4)</span></span><br><span class="line">    <span class="comment"># inner: hello world, flag=True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类装饰器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outter4</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, f</span>):</span><br><span class="line">        self.f = f</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;inner: <span class="subst">&#123;args=&#125;</span>, <span class="subst">&#123;kwargs=&#125;</span>&quot;</span>)</span><br><span class="line">        res = self.f(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="meta">@Outter4</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func4</span>(<span class="params">a, b, c=<span class="number">3</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;func: <span class="subst">&#123;a, b, c, d&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t4</span>():</span><br><span class="line">    func4(<span class="number">1</span>, <span class="number">2</span>, d=<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># inner: args=(1, 2), kwargs=&#123;&#x27;d&#x27;: 4&#125;</span></span><br><span class="line">    <span class="comment"># func: (1, 2, 3, 4)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    t4()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-property"><a href="#2-2-property" class="headerlink" title="2.2. property"></a>2.2. property</h3><p><strong>3. property属性</strong></p><ul><li>property属性就是负责把一个方法当做属性进行使用，这样做可以简化代码使用</li><li>定义方式<ul><li>装饰器方式</li><li>类属性方式</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类属性方式 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):     </span><br><span class="line">        self.__age = <span class="number">0</span>   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_age</span>(<span class="params">self</span>):     </span><br><span class="line">        <span class="keyword">return</span> self.__age   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_age</span>(<span class="params">self, value</span>):    </span><br><span class="line">        self.__age = value</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第一个参数是获取值的方法， 第二个是设置值的方法   </span></span><br><span class="line">    age = <span class="built_in">property</span>(get_age, set_age)      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器方式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取年龄</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__age   </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置年龄</span></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self, value</span>):     </span><br><span class="line">        self.__age = value  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-with语句-amp-上下文管理器"><a href="#2-3-with语句-amp-上下文管理器" class="headerlink" title="2.3. with语句&amp;上下文管理器"></a>2.3. with语句&amp;上下文管理器</h3><ul><li>with 语句执行完成以后自动调用关闭文件操作, 即使出现异常</li><li>一个类只要实现了<code>__enter__()</code>和<code>__exit__()</code>这个两个方法，通过该类创建的对象我们就称之为上下文管理器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要实现上下文管理器， 要实现__enter__ 和 __exit__  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">File</span>(<span class="title class_ inherited__">object</span>):   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, file_name, file_mode</span>):</span><br><span class="line">        self.file_name = file_name</span><br><span class="line">        self.file_mode = file_mode</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 实现上文的方法，主要用来提供资源，需要返回一个对象</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;entered up&#x27;</span>)</span><br><span class="line">            self.fp = <span class="built_in">open</span>(self.file_name, self.file_mode)</span><br><span class="line">            <span class="keyword">return</span> self.fp</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 实现下文的方法，主要用来释放资源</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;exited down&#x27;</span>)</span><br><span class="line">            self.fp.close()</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"><span class="keyword">with</span> File(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># entered up</span></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># exited down</span></span><br></pre></td></tr></table></figure><ul><li><p>上下文管理器可以使用 with 语句，with语句之所以这么强大，背后是由上下文管理器做支撑的，也就是说刚才使用 open 函数创建的文件对象就是就是一个上下文管理器对象</p></li><li><p><code>__enter__</code>表示上文方法，需要返回一个操作文件对象</p></li><li><p><code>__exit__</code>表示下文方法，with语句执行完成会自动执行，即使出现异常也会执行该方法</p></li></ul><h3 id="2-4-深拷贝和浅拷贝"><a href="#2-4-深拷贝和浅拷贝" class="headerlink" title="2.4. 深拷贝和浅拷贝"></a>2.4. 深拷贝和浅拷贝</h3><ul><li><code>import copy</code>拷贝的目的: 保证原数据和拷贝的数据之间不影响</li><li><strong><code>copy.copy()</code> 浅拷贝</strong>，只对可变类型的第一层对象进行拷贝，对拷贝的对象开辟新的内存空间进行存储，不会拷贝对象内部的子对象<ul><li>不可变类型进行浅拷贝不会给拷贝的对象开辟新的内存空间，而只是拷贝了这个对象的引用</li><li>可变类型进行浅拷贝只对可变类型的第一层对象进行拷贝，对拷贝的对象会开辟新的内存空间进行存储，子对象不进行拷贝</li></ul></li><li><strong><code>copy.deepcopy()</code> 深拷贝</strong>, 只要发现对象有可变类型就会对该对象到最后一个可变类型的每一层对象就行拷贝, 对每一层拷贝的对象都会开辟新的内存空间进行存储<ul><li>不可变类型进行深拷贝如果子对象没有可变类型则不会进行拷贝，而只是拷贝了这个对象的引用，否则会对该对象到最后一个可变类型的每一层对象就行拷贝, 对每一层拷贝的对象都会开辟新的内存空间进行存储</li><li>可变类型进行深拷贝会对该对象到最后一个可变类型的每一层对象就行拷贝, 对每一层拷贝的对象都会开辟新的内存空间进行存储</li></ul></li><li><strong>浅拷贝最多拷贝对象的一层 (即使可变类型, 也只拷贝第一层) 其它情况都是拷贝引用</strong></li><li><strong>深拷贝可能拷贝对象的多层 (只要是有可变类型, 就全部拷贝) 其它情况都是拷贝引用</strong></li></ul><h3 id="2-5-单例"><a href="#2-5-单例" class="headerlink" title="2.5. 单例"></a>2.5. 单例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只有一份内存空间</span></span><br><span class="line"><span class="comment"># __new__ 开辟内存空间, 会在__init__之前执行 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>(<span class="title class_ inherited__">object</span>):   </span><br><span class="line">    is_instance = <span class="literal">None</span>   </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.is_instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 保证下边代码执行一次</span></span><br><span class="line">            cls.is_instance = <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">            <span class="keyword">return</span> cls.is_instance</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> cls.is_instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Singleton()</span><br><span class="line">b = Singleton()</span><br><span class="line">c = Singleton()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a) == <span class="built_in">id</span>(b) == <span class="built_in">id</span>(c)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-基础&quot;&gt;&lt;a href=&quot;#一-基础&quot; class=&quot;headerlink&quot; title=&quot;一. 基础&quot;&gt;&lt;/a&gt;一. 基础&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;编译型语言&lt;ul&gt;
&lt;li&gt;定义：在程序运行之前，源代码会先经过编译器将其转换为机器语言的形式，生成可执行文</summary>
      
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/06/28/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2023/06/28/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%9F%BA%E7%A1%80/</id>
    <published>2023-06-28T11:01:42.921Z</published>
    <updated>2023-06-29T06:25:47.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="人工智能基础"><a href="#人工智能基础" class="headerlink" title="人工智能基础"></a>人工智能基础</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><h3 id="1-1-人工智能起源"><a href="#1-1-人工智能起源" class="headerlink" title="1.1. 人工智能起源"></a>1.1. 人工智能起源</h3><ul><li>图灵测试</li><li>达特茅斯会议</li></ul><h3 id="1-2-人工智能三个阶段"><a href="#1-2-人工智能三个阶段" class="headerlink" title="1.2. 人工智能三个阶段"></a>1.2. 人工智能三个阶段</h3><ul><li>1980年代是正式成形期</li><li>1990-2010年代是蓬勃发展期</li><li>2012年之后是深度学习期</li></ul><h3 id="1-3-人工智能、机器学习和深度学习"><a href="#1-3-人工智能、机器学习和深度学习" class="headerlink" title="1.3. 人工智能、机器学习和深度学习"></a>1.3. 人工智能、机器学习和深度学习</h3><ul><li>机器学习是人工智能的一个实现途径</li><li>深度学习是机器学习的一个方法发展而来</li></ul><h3 id="1-4-主要分支"><a href="#1-4-主要分支" class="headerlink" title="1.4. 主要分支"></a>1.4. 主要分支</h3><ul><li>计算机视觉 CV<ul><li>人脸识别</li></ul></li><li>自然语言处理 NLP<ul><li>语音识别</li><li>语义识别</li></ul></li><li>机器人</li></ul><h3 id="1-5-人工智能必备三要素"><a href="#1-5-人工智能必备三要素" class="headerlink" title="1.5. 人工智能必备三要素"></a>1.5. 人工智能必备三要素</h3><ul><li>数据</li><li>算法</li><li>计算力</li></ul><h3 id="1-6-GPU、CPU"><a href="#1-6-GPU、CPU" class="headerlink" title="1.6. GPU、CPU"></a>1.6. GPU、CPU</h3><ul><li>GPU – 计算密集型</li><li>CPU  –  IO密集型</li></ul><h2 id="2-机器学习"><a href="#2-机器学习" class="headerlink" title="2. 机器学习"></a>2. 机器学习</h2><h3 id="2-1-工作流程"><a href="#2-1-工作流程" class="headerlink" title="2.1. 工作流程"></a>2.1. 工作流程</h3><ol><li>数据获取</li></ol><p>数据类型构成</p><ul><li>特征值 + 目标值（目标值分为离散还是连续）</li><li>仅有特征值，无目标值</li></ul><p>数据划分</p><ul><li>训练集 0.7~0.8</li><li>测试集 0.2~0.3</li></ul><ol start="2"><li>数据基本处理</li></ol><blockquote><p>对数据进行缺失值、去除异常值等处理</p></blockquote><ol start="3"><li>特征工程</li></ol><blockquote><p>把数据转换为机器更容易识别的数据</p><p>数据和特征决定了机器学习的上限，模型和算法只是逼近这个上限而已</p></blockquote><ul><li>特征提取</li><li>特征预处理</li><li>特征降维</li></ul><ol start="4"><li>机器学习（模型训练）</li></ol><blockquote><p>选择合适的算法对模型进行训练</p></blockquote><ol start="5"><li>模型评估</li></ol><blockquote><p>对训练好的模型进行评估</p></blockquote><h3 id="2-2-机器学习算法分类"><a href="#2-2-机器学习算法分类" class="headerlink" title="2.2. 机器学习算法分类"></a>2.2. 机器学习算法分类</h3><ul><li>监督学习：有特征值，有目标值<ul><li>目标值连续：回归</li><li>目标值离散：分类</li></ul></li><li>无监督学习：仅有特征值</li><li>半监督学习：有特征值，但一部分数据有目标值 ，一部分没有</li><li>强化学习：即自动进行决策，并可以做连续决策<ul><li>动态过程，上一步的输出是下一步的输入</li><li>四要素：agent, action, environment, reward</li></ul></li></ul><h3 id="2-3-模型评估"><a href="#2-3-模型评估" class="headerlink" title="2.3. 模型评估"></a>2.3. 模型评估</h3><ul><li><p>分类模型评估</p><ul><li>准确率：预测正确的数占样本总数的比例</li><li>精确率：预测为正的数占全部预测为正的比例</li><li>召回率： 预测为正占全部正样本的比例</li><li>F1-score：主要用于评估模型的稳健性</li><li>AUC指标：主要用于评估样本不均衡的情况</li></ul></li><li><p>回归模型评估</p><blockquote><p>p &#x3D; predicted target</p><p>a &#x3D; actual target</p></blockquote><ul><li>均方根误差(Root Mean Squared Error, RMSE)</li><li>相对平方误差(Relative Squared Error, RSE)</li><li>平均绝对误差(Mean Absolute Error, MAE)</li><li>相对绝对误差(Relative Absolute Error, RAE)</li><li>决定系数(Coefficient of Determination)</li></ul></li><li><p>拟合度（评估结果）</p><ul><li>欠拟合：学习到的特征太少（有两个眼睛的就是人）</li><li>过拟合：学习到的特征太多（仅黄皮肤的才是人）</li></ul></li></ul><h2 id="3-机器学习环境配置"><a href="#3-机器学习环境配置" class="headerlink" title="3. 机器学习环境配置"></a>3. 机器学习环境配置</h2><h3 id="3-1-环境安装"><a href="#3-1-环境安装" class="headerlink" title="3.1. 环境安装"></a>3.1. 环境安装</h3><ul><li>创建虚拟环境： <code>conda create --name=ai0 python=3.10</code></li><li>安装相关包：<ul><li>matplotlib&#x3D;&#x3D;2.2.2</li><li>numpy&#x3D;&#x3D;1.14.2</li><li>pandas&#x3D;&#x3D;0.20.3</li><li>tables&#x3D;&#x3D;3.4.2</li><li>jupyter&#x3D;1.0.0</li></ul></li><li>先从cmd进入指定目录后执行<code>jupyter notebook</code></li></ul><h3 id="3-2-jupyter基操"><a href="#3-2-jupyter基操" class="headerlink" title="3.2. jupyter基操"></a>3.2. jupyter基操</h3><blockquote><p>类似vim, 分不同的输入模式，命令也和vim基本相同</p></blockquote><ul><li>两种模式通用快捷键<ul><li><code>Shift + Enter</code>  执行本单元代码，跳转到下一单元</li><li><code>Ctrl + Enter</code> 执行本单元代码，留在本单元</li></ul></li><li><strong>命令模式</strong>：按 <code>ESC</code>  进入<ul><li><code>Y</code>, cell 切换到Code模式</li><li><code>M</code>, cell 切换到Markdown模式</li><li><code>A</code>, 在当前cell上面添加cell</li><li><code>B</code>, 在当前cell下面添加cell</li><li><code>DD</code>, 删除当前cell</li><li><code>Z</code>, 回退</li><li><code>L</code>, 为当前cell加上行号&lt;!–</li><li><code>Ctrl+Shift+P</code>, 对话框输入命令直接运行</li><li><code>Ctrl+Home</code>, 跳转到首个cell</li><li><code>Ctrl+End</code>, 跳转到末个cell</li></ul></li><li><strong>编辑模式</strong>: 按 <code>Enter</code> 进入<ul><li><code>Ctrl + 点击</code>, 多光标操作</li><li><code>Ctrl + Z</code>, 回退</li><li><code>Ctrl + Y</code>, 重做</li><li><code>TAB</code>,  代码补全</li><li><code>Ctrl + /</code> 注释&#x2F;取消注释</li><li><code>代码后 + ;</code>  屏蔽输出</li></ul></li></ul><h2 id="4-Matplotlib"><a href="#4-Matplotlib" class="headerlink" title="4. Matplotlib"></a>4. Matplotlib</h2><blockquote><p>用于开发2D、3D图表</p><p>使用简单，以渐进、交互式实现数据可视化</p></blockquote><h3 id="4-1-三层结构"><a href="#4-1-三层结构" class="headerlink" title="4.1. 三层结构"></a>4.1. 三层结构</h3><ul><li><strong>容器层</strong><ul><li>Canvas: 最底层的系统层，充当画板角色，即放置画布(Figure)的工具</li><li>Figure: <code>Canvas</code>上第一层，充当画布角色 </li><li>Axes：应用层的第二层，在绘图过程中相当于画布上的绘图区的角色<ul><li>Axes: 坐标系，数据的绘图区域</li><li>Axis: 坐标轴</li></ul></li></ul></li><li><strong>辅助显示层</strong>：为Axes内除了根据数据绘制出的图像以外的内容，主要包括<code>facecolor(Axes外观)</code>、<code>spines(边框线)</code>、<code>axis(坐标轴)</code> 、<code>axix lable(坐标轴名称)</code>、<code>tick(坐标轴刻度)</code>、<code>tick lable(坐标轴刻度标签)</code>、<code>gird(网格线)</code>、<code>legend(图例)</code>、<code>title(标题)</code>等</li><li><strong>图像层</strong>：指<code>Axes</code>内通过 <code>plot</code>, <code>scatter</code>, <code>histogram</code>, <code>pie</code>等函数根据数据绘制出的图像。</li></ul><h3 id="4-2-折线图与基操"><a href="#4-2-折线图与基操" class="headerlink" title="4.2. 折线图与基操"></a>4.2. 折线图与基操</h3><blockquote><p><code>help(plt.figure)</code> 查看命令帮助</p><p>负号报错 plt.rcParams[“axes.unicode_minus”]&#x3D;False 加这句</p><p>中文乱码，需要把系统使用的中文字体对应的英文名称添加到matplotlib配置中 matplotlib.matplotlib_fname()  可查到是 matplotlib&#x2F;mpl-data&#x2F;matplotlibrc 此文件，查 #font.sans-serif 解注释并把英文字体名加到第一个位置</p></blockquote><p><strong>Hello World</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.创建画布</span></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.图像绘制</span></span><br><span class="line">x = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">y = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">8</span>)]</span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.1. 图像保存, 要放到show前</span></span><br><span class="line">plt.savefig()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.显示图像</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>基操</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0.生成数据</span></span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">60</span>)</span><br><span class="line">y_peking = [random.uniform(<span class="number">10</span>, <span class="number">15</span>) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">y_shanghai = [random.uniform(<span class="number">15</span>, <span class="number">25</span>) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建画布</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>), dpi=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.图形绘制</span></span><br><span class="line">plt.plot(x, y_peking, color=<span class="string">&quot;r&quot;</span>, label=<span class="string">&quot;北京&quot;</span>, linestyle=<span class="string">&quot;dashed&quot;</span>)</span><br><span class="line">plt.plot(x, y_shanghai, label=<span class="string">&quot;上海&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.1. 添加x,y刻度</span></span><br><span class="line">x_ticks_labels = [<span class="string">f&quot;11点<span class="subst">&#123;i&#125;</span>&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">y_ticks = <span class="built_in">range</span>(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">plt.yticks(y_ticks[::<span class="number">5</span>])</span><br><span class="line">plt.xticks(x[::<span class="number">5</span>], x_ticks_labels[::<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.2. 添加网络信息</span></span><br><span class="line"><span class="comment"># 参数：linestyle: 绘制网格的方式，alpha:透明度</span></span><br><span class="line">plt.grid(<span class="literal">True</span>, linestyle=<span class="string">&quot;-&quot;</span>, alpha=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.3. 添加描述</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;时间&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;温度&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;中午11：00到12：00温度变化&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.4. 显示图例, 需要在显示前声明plot里面的值</span></span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 图像显示</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>多个坐标系图像显示</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个坐标系显示图像</span></span><br><span class="line"><span class="comment"># 0.生成数据</span></span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">60</span>)</span><br><span class="line">y_peking = [random.uniform(<span class="number">10</span>, <span class="number">15</span>) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">y_shanghai = [random.uniform(<span class="number">15</span>, <span class="number">25</span>) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建画布</span></span><br><span class="line"><span class="comment"># plt.figure(figsize=(20, 8), dpi=100)</span></span><br><span class="line">fig, axes = plt.subplots(nrows=<span class="number">1</span>, ncols=<span class="number">2</span>, figsize=(<span class="number">20</span>, <span class="number">8</span>), dpi=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.图形绘制</span></span><br><span class="line"><span class="comment"># plt.plot(x, y_peking, color=&quot;r&quot;, label=&quot;北京&quot;, linestyle=&quot;dashed&quot;)</span></span><br><span class="line"><span class="comment"># plt.plot(x, y_shanghai, label=&quot;上海&quot;)</span></span><br><span class="line">axes[<span class="number">0</span>].plot(x, y_peking, color=<span class="string">&quot;r&quot;</span>, label=<span class="string">&quot;北京&quot;</span>, linestyle=<span class="string">&quot;dashed&quot;</span>)</span><br><span class="line">axes[<span class="number">1</span>].plot(x, y_shanghai, label=<span class="string">&quot;上海&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.1. 添加x,y刻度</span></span><br><span class="line">x_ticks_labels = [<span class="string">f&quot;11点<span class="subst">&#123;i&#125;</span>&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">y_ticks = <span class="built_in">range</span>(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.yticks(y_ticks[::5])</span></span><br><span class="line"><span class="comment"># plt.xticks(x[::5], x_ticks_labels[::5])</span></span><br><span class="line"></span><br><span class="line">axes[<span class="number">0</span>].set_xticks(x[::<span class="number">5</span>])</span><br><span class="line">axes[<span class="number">0</span>].set_yticks(y_ticks[::<span class="number">5</span>])</span><br><span class="line">axes[<span class="number">0</span>].set_xticklabels(x_ticks_labels[::<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">axes[<span class="number">1</span>].set_xticks(x[::<span class="number">5</span>])</span><br><span class="line">axes[<span class="number">1</span>].set_yticks(y_ticks[::<span class="number">5</span>])</span><br><span class="line">axes[<span class="number">1</span>].set_xticklabels(x_ticks_labels[::<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.2. 添加网络信息</span></span><br><span class="line"><span class="comment"># 参数：linestyle: 绘制网格的方式，alpha:透明度</span></span><br><span class="line"><span class="comment"># plt.grid(True, linestyle=&quot;-&quot;, alpha=1)</span></span><br><span class="line">axes[<span class="number">0</span>].grid(<span class="literal">True</span>, linestyle=<span class="string">&quot;-&quot;</span>, alpha=<span class="number">1</span>)</span><br><span class="line">axes[<span class="number">1</span>].grid(<span class="literal">True</span>, linestyle=<span class="string">&quot;-&quot;</span>, alpha=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.3. 添加描述</span></span><br><span class="line"><span class="comment"># plt.xlabel(&quot;时间&quot;)</span></span><br><span class="line"><span class="comment"># plt.ylabel(&quot;温度&quot;)</span></span><br><span class="line"><span class="comment"># plt.title(&quot;中午11：00到12：00温度变化&quot;)</span></span><br><span class="line"></span><br><span class="line">axes[<span class="number">0</span>].set_xlabel(<span class="string">&quot;时间&quot;</span>)</span><br><span class="line">axes[<span class="number">0</span>].set_ylabel(<span class="string">&quot;温度&quot;</span>)</span><br><span class="line">axes[<span class="number">0</span>].set_title(<span class="string">&quot;中午11：00到12：00温度变化&quot;</span>)</span><br><span class="line"></span><br><span class="line">axes[<span class="number">1</span>].set_xlabel(<span class="string">&quot;时间&quot;</span>)</span><br><span class="line">axes[<span class="number">1</span>].set_ylabel(<span class="string">&quot;温度&quot;</span>)</span><br><span class="line">axes[<span class="number">1</span>].set_title(<span class="string">&quot;中午11：00到12：00温度变化&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.4. 显示图例, 需要在显示前声明plot里面的值</span></span><br><span class="line"><span class="comment"># plt.legend(loc=0)</span></span><br><span class="line"></span><br><span class="line">axes[<span class="number">0</span>].legend(loc=<span class="number">0</span>)</span><br><span class="line">axes[<span class="number">1</span>].legend(loc=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 图像显示</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="5-Numpy"><a href="#5-Numpy" class="headerlink" title="5. Numpy"></a>5. Numpy</h2><h3 id="5-1-基操"><a href="#5-1-基操" class="headerlink" title="5.1. 基操"></a>5.1. 基操</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;人工智能基础&quot;&gt;&lt;a href=&quot;#人工智能基础&quot; class=&quot;headerlink&quot; title=&quot;人工智能基础&quot;&gt;&lt;/a&gt;人工智能基础&lt;/h1&gt;&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python虚拟环境conda</title>
    <link href="http://example.com/2023/04/26/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83conda/"/>
    <id>http://example.com/2023/04/26/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83conda/</id>
    <published>2023-04-26T06:18:19.000Z</published>
    <updated>2023-07-01T01:58:15.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="conda"><a href="#conda" class="headerlink" title="conda"></a>conda</h1><blockquote><p>mac下安装完anaconda后会自动安装conda，进入终端会自动启动base虚拟环境（自带的默认虚拟环境）</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="基操"><a href="#基操" class="headerlink" title="基操"></a>基操</h3><ol><li><code>conda create</code>：创建新的虚拟环境。<code>conda create -n py39 python=3.9</code></li><li><code>conda activate</code>：激活一个已经存在的虚拟环境。</li><li><code>conda deactivate</code>：停用当前激活的虚拟环境。</li><li><code>conda list</code>：列出所有已安装的包及其版本号。</li><li><code>conda install</code>：安装新的包。</li><li><code>conda update</code>：更新已安装的包。</li><li><code>conda remove</code>：卸载已安装的包。</li><li><code>conda search</code>：搜索可用的包。</li><li><code>conda info</code>：查看conda的配置信息。</li><li><code>conda clean</code>：清理conda中的缓存、未使用的软件包和环境。</li><li><code>conda config</code>：配置conda的选项。</li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="mac下安完anaconda后进终端会自动启用base虚拟环境"><a href="#mac下安完anaconda后进终端会自动启用base虚拟环境" class="headerlink" title="mac下安完anaconda后进终端会自动启用base虚拟环境"></a>mac下安完anaconda后进终端会自动启用base虚拟环境</h3><ul><li>使用 <code>conda config --set auto_activate_base false</code> 关闭</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;conda&quot;&gt;&lt;a href=&quot;#conda&quot; class=&quot;headerlink&quot; title=&quot;conda&quot;&gt;&lt;/a&gt;conda&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;mac下安装完anaconda后会自动安装conda，进入终端会自动启动base虚拟环境（</summary>
      
    
    
    
    
    <category term="python conda" scheme="http://example.com/tags/python-conda/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理</title>
    <link href="http://example.com/2022/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2022/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</id>
    <published>2022-02-20T06:59:37.000Z</published>
    <updated>2023-07-01T01:58:15.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h1><h2 id="1-Basic"><a href="#1-Basic" class="headerlink" title="1. Basic"></a>1. Basic</h2><h3 id="1-1-基本组成"><a href="#1-1-基本组成" class="headerlink" title="1.1. 基本组成"></a>1.1. 基本组成</h3><p><strong>五大部分</strong></p><ul><li><strong>运算器</strong>  (CPU) (主机): 算术运算、逻辑运算</li><li><strong>控制器</strong>  (CPU) (主机): 指挥各部件, 使程序运行</li><li>存储器 : 存放数据和程序<ul><li><strong>主存</strong>  (主机)</li><li>辅存  (I&#x2F;O设备)</li></ul></li><li><strong>输入设备</strong>  (I&#x2F;O设备)</li><li><strong>输出设备</strong>  (I&#x2F;O设备)</li></ul><h3 id="1-2-各硬件部分"><a href="#1-2-各硬件部分" class="headerlink" title="1.2. 各硬件部分"></a>1.2. 各硬件部分</h3><blockquote><p>寄存, 就是暂存数据的意思, 类似快递点</p></blockquote><p><strong>主存储器</strong></p><blockquote><p>存储体存数据, MAR对应数据位置(主存地址), MDR暂存对应的实际数据</p><p>类似快递点: 存储体&#x3D;&gt; 货架,  MAR &#x3D;&gt; 店员,  MDR &#x3D;&gt; 取货&#x2F;放货 的柜台</p><p>取数据过程: CPU把地址给到MAR, 把读指令给到主存储器, 主存储器把存储体MAR地址的数据放到MDR等待使用</p><p>存数据过程: CPU把地址给到MAR, 把数据放到MDR, 把写指令给到主存储器, 主存储器根据指令把MDR中数据存储到存储体的MAR地址</p></blockquote><ul><li>存储体: 数据在存储体中按地址存储, 每个地址对应一个存储单元<ul><li>存储单元: 每个存储单元存放一串二进制代码<ul><li>存储元: 即存储二进制的电子元件, 每个存储元可存1bit</li></ul></li><li>存储字: 存储单元中二进制的组合</li><li>存储字长: 存储单元中二进制代码的位数</li></ul></li><li>MAR: 存储地址寄存器, 用于指明要读&#x2F;写哪个存储单元, 其位数反映存储单元数量 Memory Address Register </li><li>MDR: 存储数据寄存器, 用于暂存要读&#x2F;写的数据, 其位数&#x3D;存储字长 Memory Data Register</li></ul><p><strong>运算器</strong>: 用于实现算术运算(+ - * &#x2F;)、逻辑运算(与&#x2F;非)</p><blockquote><p>前三个存数据, ALU执行(运算)</p></blockquote><ul><li>ACC: 累加计数器, 存放操作数、运算的结果 Accumulator</li><li>MQ: 乘商寄存器, 进行乘、除法时用  Multiple-Quotient Register</li><li>X: 通用寄存器, 存放操作数</li><li>ALU: 算数逻辑单元, 用电路实现各种算数运算、逻辑运算  Arthmetic and Logic Unit</li></ul><p><strong>控制器</strong></p><blockquote><p>PC + IR 取指令, CU执行</p></blockquote><ul><li>PC: 程序计数器, 存放下一条指令的地址  Program Counter</li><li>IR: 指令寄存器, 存放当前执行的指令    Instruction Register</li><li>CU: 控制单元, 分析指令, 给出控制信息 Control Unit</li></ul><p><strong>工作过程</strong></p><ul><li>初始: 指令、数据存入主存, PC指向第一条指令</li><li>从主存中取指令放入IR、PC自动加1, CU分析指令, CU指挥其他部件执行指令</li></ul><h3 id="1-3-计算机系统层次结构"><a href="#1-3-计算机系统层次结构" class="headerlink" title="1.3. 计算机系统层次结构"></a>1.3. 计算机系统层次结构</h3><table><thead><tr><th>微程序机器M0</th><th>传统机器M1</th><th>虚拟机器M2</th><th>虚拟机器M3</th><th>虚拟机器M4</th></tr></thead><tbody><tr><td>微指令系统</td><td>用机器语言的机器</td><td>操作系统机器</td><td>汇编语言机器</td><td>高级语言机器</td></tr><tr><td>硬件</td><td>硬件</td><td>软件</td><td>软件</td><td>软件</td></tr><tr><td>由硬件直接执行微指令</td><td>执行二进制机器指令</td><td>向上提供”广义指令”(系统调用)</td><td>用汇编程序翻译成机器语言程序</td><td>用编译程序翻译成汇编语言程序</td></tr><tr><td>微指令1 &#x2F; 2 &#x2F; 3</td><td>000010000000101</td><td></td><td>LOAD 5</td><td>y&#x3D;a*b + c</td></tr></tbody></table><p><strong>三种级别的语言</strong></p><ul><li>机器语言: 二进制代码</li><li>汇编语言: 助记符<ul><li>将汇编语言翻译成机器语言</li></ul></li><li>高级语言: C, Python<ul><li>编译程序(编译器): 将高级语言一次全部翻译为汇编语言, 或直接翻译为机器语言</li><li>解释程序(解释器): 将高级语言翻译为机器语言, 翻译一句执行一句</li></ul></li></ul><h3 id="1-4-存储器的性能指标"><a href="#1-4-存储器的性能指标" class="headerlink" title="1.4. 存储器的性能指标"></a>1.4. 存储器的性能指标</h3><ul><li>CPU主频: CPU内数字脉冲信号振荡的频率 (Hz)</li><li>CPU时钟周期 &#x3D; 1 &#x2F; CPU主频  (秒)</li><li>CPI(Clock cycle Per Instruction): 执行一条指令所需的时钟周期数</li></ul><blockquote><p>不同的指令, CPI不同, 甚至相同的指令, CPI也可能变化</p></blockquote><ul><li>执行一条指令的耗时 &#x3D; CPI * CPU时钟周期</li><li>IPS(Instructions Per Second): 每秒执行多少条指令  &#x3D; 主频 &#x2F; 平均CPI   (KMGT  Kilo&#x3D;10 ** 3  Million&#x3D;10 ** 6)</li><li>FLOPS(Floating-point Operations Per Second): 每秒执行多少次浮点运算  (KMGT  Giga&#x3D;10 ** 9  Tera&#x3D;10 ** 12)</li></ul><h3 id="1-5-系统整体的性能指标"><a href="#1-5-系统整体的性能指标" class="headerlink" title="1.5. 系统整体的性能指标"></a>1.5. 系统整体的性能指标</h3><blockquote><p>描述存储容量, 文件大小时: K &#x3D; 2^10, M&#x3D;2^20, G&#x3D;2^30, T&#x3D;2^40</p><p>描述频率, 速率时: K&#x3D;10^3, M&#x3D;10^6, G&#x3D;10^9, T&#x3D;10^12</p></blockquote><ul><li>数据通路带宽: 数据总线一次所能并行传送信息的位数(各硬件部件通过数据总线传输数据)</li><li>吞吐量: 指系统在单位时间内处理请求的数量</li><li>响应时间: 指从用户向计算机发送一个请求, 到系统对该请求做出响应并获得它所需要的结果的时间</li><li>基准程序: 用来测量计算机的一种实用程序(跑分软件)</li></ul><h2 id="2-数据的表示和运算"><a href="#2-数据的表示和运算" class="headerlink" title="2. 数据的表示和运算"></a>2. 数据的表示和运算</h2><h3 id="2-1-进位计数制"><a href="#2-1-进位计数制" class="headerlink" title="2.1. 进位计数制"></a>2.1. 进位计数制</h3><ul><li><p>位权: 由符号的位置反映权重</p></li><li><p>基数: 每个数码位所用到的不同符号的个数, r进制的基数为r</p></li><li><p>计算机使用二进制</p><ul><li>可使用两个稳定状态的物理器件表示</li><li>0，1正好对应逻辑值 真、假。方便实现逻辑运算</li><li>可很方便地使用逻辑门电路实现算术运算</li></ul></li><li><p>二进制 &gt;&gt; 八进制： 3位一组，每组转换成对应的八进制符号</p></li><li><p>二进制 &gt;&gt; 十六进制： 3位一组</p></li><li><p>十进制 &gt;&gt; r进制</p><ul><li>整数部分：除基取余法，先取得的“余”是整数的低位</li><li>小数部分：乘基取整法，先取得的“整”是小数的高位</li></ul></li></ul><table><thead><tr><th>2^12^</th><th>2^11^</th><th>2^10^</th><th>2^9^</th><th>2^8^</th><th>2^7^</th><th>2^6^</th><th>2^5^</th><th>2^4^</th><th>2^3^</th><th>2^2^</th><th>2^1^</th><th>2^0^</th><th>2^-1^</th><th>2^-2^</th><th>2^-3^</th></tr></thead><tbody><tr><td>4096</td><td>2048</td><td>1024</td><td>512</td><td>256</td><td>128</td><td>64</td><td>32</td><td>16</td><td>8</td><td>4</td><td>2</td><td>1</td><td>0.5</td><td>0.25</td><td>0.125</td></tr></tbody></table><blockquote><p>参考上图可知有部分小数是无法用二进制精确表示的</p></blockquote><ul><li>真值： 实际的带正负号的数值（人类习惯的样子）</li><li>机器数：把正负号数字化的数（存到机器里的样子）</li></ul><h3 id="2-2-BCD码"><a href="#2-2-BCD码" class="headerlink" title="2.2. BCD码"></a>2.2. BCD码</h3><blockquote><p>二进制转十进制时按乘转换麻烦, 所以用BCD转换</p><p>BCD: Binary-Coded Decimal, 用二进制编码的十进制</p></blockquote><ul><li><strong>8421码</strong></li></ul><p>映射关系:</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>0000</td><td>0001</td><td>0010</td><td>0011</td><td>0100</td><td>0101</td><td>0110</td><td>0111</td><td>1000</td><td>1001</td></tr></tbody></table><p>例:</p><p>十进制:   5  +  8                     13</p><p>十进制: 0101  +  1000         1101 </p><p> 8421码中 1010 ~ 1111 没有定义 需要 + 0110 做数据修正(强制向高位进1) 上例得  0001 0011 即 13</p><p>4个十进制位 –&gt;&gt; 16种不同的状态</p><p>BCD码只使用其中的10种  –&gt;&gt; 不同的映射方案</p><ul><li><strong>余3码:</strong>  8421码  +  (0011)<del>2</del></li></ul><p>映射关系:</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>0011</td><td>0100</td><td>0101</td><td>0110</td><td>0111</td><td>1000</td><td>1001</td><td>1010</td><td>1011</td><td>1100</td></tr></tbody></table><ul><li><strong>2421码:</strong>  改变权值的定义</li></ul><p>XXXX -&gt; 2421  并规定 0<del>4 开头是0  5</del>? 开头是1</p><p>映射关系:</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>0000</td><td>0001</td><td>0010</td><td>0011</td><td>0100</td><td>1011</td><td>1100</td><td>1101</td><td>1110</td><td>1111</td></tr></tbody></table><h3 id="2-3-字符与字符串"><a href="#2-3-字符与字符串" class="headerlink" title="2.3. 字符与字符串"></a>2.3. 字符与字符串</h3><h4 id="2-3-1-ASCII码"><a href="#2-3-1-ASCII码" class="headerlink" title="2.3.1. ASCII码"></a>2.3.1. ASCII码</h4><blockquote><p>常用的数字、字母、符号(英文)共128个字符 –&gt; 7个二进制编码  –&gt; ASCII码 </p><p>存入计算机通常在高位补个0, 凑足1B(字节)  即 8bit</p><p>可印刷字符: 32~126, 其余为控制、通信字符</p><p>规律:</p><p>​数字: 48(0011 0000) ~ 57(0011 1001) 后面一个比特位刚好是数字对应的8421码</p><p>​大写字母: 65(0100 0001) ~ 90(0101 1010) 前三个010 后面为1~26</p><p>​小写字母: 97(0110 0001) ~ 122(0111 1010) 前三个011 后面为1~26</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) == <span class="number">32</span></span><br><span class="line">&gt;&gt; <span class="literal">True</span></span><br></pre></td></tr></table></figure></blockquote><p><img src="/..%5Cimages%5Cimage-20220724170433901.png" alt="image-20220724170433901"></p><h4 id="2-3-2-汉字的表示和编码"><a href="#2-3-2-汉字的表示和编码" class="headerlink" title="2.3.2. 汉字的表示和编码"></a>2.3.2. 汉字的表示和编码</h4><p>1980年 GB 2312-80: 汉字+各种符号共7445个</p><p>区位码: 94个区,  每区94个位置(即94行, 94列)</p><p>国标码: 为防止信息交换时与”控制&#x2F;通信字符”冲突,  在区位码基础上加32(16进制: 20H)</p><blockquote><p>国标码已可保证数据传输, 但无法和ASCII做区分</p></blockquote><p>汉字内码: 保证高位为1, 与ASCII码做区分, 在国标码基础上加128 (1000, 0000) (16进制: 80H)</p><blockquote><p>汉字内码可以保证数据在计算机内部的处理, 计算机发现高位为1时可判断出是汉字</p></blockquote><p>例: </p><table><thead><tr><th>汉字(十进制)</th><th>区位码(十六进制)</th><th>国标码(十六进制)</th><th>汉字内码(十六进制)</th></tr></thead><tbody><tr><td>啊(16 01)</td><td>10H 01H</td><td>30H 21H</td><td>B0H A1H</td></tr></tbody></table><p>输入：输入编码</p><blockquote><p>拼音  a1 &#x3D;&gt; 国标码 &#x3D;&gt; 汉字内码</p></blockquote><p>输出：汉字字形码</p><blockquote><p>就是对应到一个字块的像素</p></blockquote><h4 id="2-3-3-字符串"><a href="#2-3-3-字符串" class="headerlink" title="2.3.3. 字符串"></a>2.3.3. 字符串</h4><ul><li>从低地址到高地址逐个字符存储, 很多语言中,  ‘\0’作为字符串结尾标识</li><li>对于多字节的数据(如汉字),  可采取大&#x2F;小端存储模式</li><li>大&#x2F;小端模式: 将数据的最高有效字节存放在低&#x2F;高地址单元中</li></ul><h3 id="2-4-奇偶校验"><a href="#2-4-奇偶校验" class="headerlink" title="2.4. 奇偶校验"></a>2.4. 奇偶校验</h3><h4 id="2-4-1-原理"><a href="#2-4-1-原理" class="headerlink" title="2.4.1. 原理"></a>2.4.1. 原理</h4><ul><li><p>码字: 由若干位代码组成的一个字</p></li><li><p>将两个码字逐位进行对比,  具有不同的位的个数称为两个码字间的距离</p></li><li><p>码距(d): 一种编码方案可能有若干个合法码字,  各合法码字间的最小距离我称为码距</p></li><li><p>当d &#x3D; 1时, 无检错能力</p></li><li><p>当d &#x3D; 2时, 有检错能力</p></li><li><p>当d &#x3D; 3 时, 可能有检错、纠错能力</p></li></ul><p>奇校验码: 整个校验码(有效信息位和校验位) 中的 1 个个数为奇数</p><table><thead><tr><th>奇&#x2F;偶 校验位</th><th>信息位</th></tr></thead><tbody><tr><td>1&#x2F;0</td><td>n</td></tr></tbody></table><p>偶校验硬件实现: </p><ul><li><p>计算校验位的值:  各信息进行异或运算, 得到的结果即为偶校验位</p></li><li><p>校验:  对所有位进行异或, 结果为1说明出错</p></li></ul><h4 id="2-4-2-海明码"><a href="#2-4-2-海明码" class="headerlink" title="2.4.2. 海明码"></a>2.4.2. 海明码</h4><blockquote><p>由于奇偶校验的策略仅加了一个比特位,  只能携带2种状态, 能发现数位错误,  但无法确定是哪一位出错</p><p>海明码是在原数据中的一些固定位置，插入一个0（或1），以进行奇（或偶）校验位，虽然使原数据变长，但可使其拥有纠错能力。<br>能侦测并更正一个比特的错误；若有两个比特出错，则只能侦测，不能更正；若有三个或更多的比特出错，则不能侦测，更不能更正。</p></blockquote><p>海明码设计思路:  将信息位分组进行偶校验 &#x3D;&gt; 多个校验位 &#x3D;&gt; 多个校验位标注出错位置</p><p>n个信息位  k个校验位  共 n+k 位  2^k种状态</p><p>公式:  2^k^  &gt;&#x3D; n + k + 1</p><table><thead><tr><th>n</th><th>1</th><th>2-4</th><th>5-11</th><th>12-26</th><th>27-57</th><th>58-120</th></tr></thead><tbody><tr><td>k</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr></tbody></table><p><strong>求解步骤</strong></p><p>信息位： 1010</p><ol><li>确定海明码的位数：2^k^ &gt;&#x3D; n + k + 1</li></ol><p>n &#x3D; 4  一&gt; k &#x3D; 3</p><p>设信息位D<del>4</del>D<del>3</del>D<del>2</del>D<del>1</del>(1010)，共4位，校验位P<del>1</del>P<del>2</del>P<del>3</del>,  共3位， 对应海明码为H<del>7</del>H<del>6</del>H<del>5</del>H<del>4</del>H<del>3</del>H<del>2</del>H<del>1</del>.</p><ol start="2"><li>确定校验位的分布</li></ol><blockquote><p>校验位P<del>i</del> 放在海明码位号为2^i-1^的位置上，其余信息位顺序放</p></blockquote><table><thead><tr><th>H<del>7</del></th><th>H<del>6</del></th><th>H<del>5</del></th><th>H<del>4</del></th><th>H<del>3</del></th><th>H<del>2</del></th><th>H<del>1</del></th></tr></thead><tbody><tr><td>D<del>4</del></td><td>D<del>3</del></td><td>D<del>2</del></td><td>P<del>3</del></td><td>D<del>1</del></td><td>P<del>2</del></td><td>P<del>1</del></td></tr><tr><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td></tr></tbody></table><ol start="3"><li>求校验位的值</li></ol><p>H<del>3</del>  :  3  转二进制  0   1   1</p><p>H<del>5</del>  :  5     —&gt;&gt;&gt;    1   0   1</p><p>H<del>6</del>  :  6     —&gt;&gt;&gt;    1   1   0</p><p>H<del>7</del>   : 7      —&gt;&gt;&gt;   1   1   1</p><blockquote><p>根据P下标对应二进制位的权重进行分组</p></blockquote><p>​P1 对应二进制权重1的位置为1的信息位 H3 H5 H7 再根据对应信息位的值求异或得 0</p><p>​P2 对应二进制权重2的位置为1的信息位 H3 H6 H7 再根据对应信息位的值求异或得 1</p><p>​P3 对应二进制权重4的位置为1的信息位 H5 H6 H7  再根据对应信息位的值求异或得 0</p><ol start="4"><li>纠错</li></ol><blockquote><p>校验方程：校验位及其对应分组值求异或  为0即无错误</p></blockquote><p>接收到：1010010 无错误</p><p>接收到：1010000  H2位错误</p><p>​S1 &#x3D;&gt; P1 H3 H5 H7  &#x3D;&gt; H1 H3 H5 H7  &#x3D;&gt; 0011 &#x3D;&gt; 0</p><p>​S2 &#x3D;&gt; P2 H3 H6 H7  &#x3D;&gt; H2 H3 H6 H7  &#x3D;&gt; 0001 &#x3D;&gt; 1</p><p>​S3 &#x3D;&gt; P3 H3 H5 H7  &#x3D;&gt; H4 H3 H5 H7  &#x3D;&gt; 0011 &#x3D;&gt; 0</p><p>错误位即： 010 &#x3D;&gt; H2</p><ol start="5"><li>补充</li></ol><p>海明码的检错、纠错能力：1位可纠错， 2位可检错</p><p>实际使用中会在头部再加一个全校验位H<del>8</del>（P<del>全</del>），对整体进行偶校验</p><p>S<del>3</del>S<del>2</del>S<del>1</del>  &#x3D; 000 且全体偶校验成功  -&gt; 无错误</p><p>S<del>3</del>S<del>2</del>S<del>1</del>  !&#x3D; 000 且全体偶校验失败  -&gt; 1位错误，纠正即可</p><p>S<del>3</del>S<del>2</del>S<del>1</del>  !&#x3D; 000 且全体偶校验成功  -&gt; 2位错误，不可纠正，需重传</p><h3 id="2-5-循环冗余校验"><a href="#2-5-循环冗余校验" class="headerlink" title="2.5. 循环冗余校验"></a>2.5. 循环冗余校验</h3><blockquote><p>Cyclic Redundancy Check,  CRC</p></blockquote><h4 id="2-5-1-原理"><a href="#2-5-1-原理" class="headerlink" title="2.5.1. 原理"></a>2.5.1. 原理</h4><ol><li><p>数据发送、接受方约定一个”除数“</p></li><li><p>K个信息位 + R个校验位 作为”被除数“， 添加校验位后需要保证除法的余数为0</p></li><li><p>收到数据后，进行除法检查余数是否为0</p></li><li><p>若余数为非0说明出错，则进行纠错或重传</p></li></ol><h4 id="2-5-2-构造方法"><a href="#2-5-2-构造方法" class="headerlink" title="2.5.2. 构造方法"></a>2.5.2. 构造方法</h4><blockquote><p>模二除：十进制除法基础上，每次上的值由被除数高为是否为1决定，1就上1，0就上0再加一位（模二除后余数位数应该正好比除数少1位）</p><p>模二减：对应位取异或</p></blockquote><ol><li>由生成多项式确定”除数”。若生成多项式中x的最高次为R，则”除数“有R+1位</li><li>K个信息位 + R个0，作为”被除数“</li><li>被除数、除数 进行”模二除“，得R位余数</li><li>K个信息位 + R位余数 &#x3D; CRC码</li></ol><h4 id="2-5-3-检错纠错"><a href="#2-5-3-检错纠错" class="headerlink" title="2.5.3. 检错纠错"></a>2.5.3. 检错纠错</h4><ol><li>可检测出所有奇数个错误</li><li>可检测出所有双比特的错误</li><li>可检测出所有小于等于校验位长度的连续错误</li><li>若选择合适的生成多项式，且2^R^ &gt;&#x3D; K + R + 1，则可纠正单比特位错误</li></ol><h4 id="2-5-4-例"><a href="#2-5-4-例" class="headerlink" title="2.5.4. 例"></a>2.5.4. 例</h4><p>设生成多项式为G(x) &#x3D; x^3^ + x^2^ + 1, 信息码为101001，求对应的CRC码。</p><ol><li>确定K、R以及生成多项式对应的二进制码</li></ol><p>K&#x3D;信息码的长度：6</p><p>R&#x3D;生成多项式最高次幂：3</p><p>N(校验码位数) &#x3D; K + R &#x3D; 9</p><p>生成多项式G(x) &#x3D; 1 * x^3^ + 1 * x^2^ + 0 * x^1^ + 1 * x^0^, 对应二进制码1101</p><ol start="2"><li>移位</li></ol><p>信息码左移R位，低位补0，对应二进制码 1101000</p><ol start="3"><li>相除（模二除）</li></ol><p>101001 000 模二除 1101 余数001，</p><p>得CRC码 101001 001</p><ol start="4"><li>检错和纠错</li></ol><p>发送： 101001001</p><p>接收： 101001001 用1101进行模二除 余数为000，代表没出错</p><p>接收： 101001011 用1101进行模二除 余数为010，代表出错</p><blockquote><p>信息位+校验位 共9位，但校验位3位8保状态，无法表示全部所以才没纠错能力</p></blockquote><p>K个信息位，R个校验位，若生成多项式选择得当，且2^R^ &gt;&#x3D; K + R _+ 1, 则CRC码可纠正1位错</p><blockquote><p>CRC码实际常应用在计算机网络中，几千个bit的信息位 + 几个校验位， 仅用来检错，不用来纠错</p></blockquote><h3 id="2-6-定点数"><a href="#2-6-定点数" class="headerlink" title="2.6. 定点数"></a>2.6. 定点数</h3><blockquote><p>定点数： 小数点的位置固定  995.222               –常规计数</p><p>浮点数：小数点的位置不固定  9.95222 * 10^2^  –科学计数</p><p>二进制和十进制的一样也是分为定点和浮点</p></blockquote><h4 id="2-6-1-无符号数"><a href="#2-6-1-无符号数" class="headerlink" title="2.6.1. 无符号数"></a>2.6.1. 无符号数</h4><ul><li><p>概念：整个机器字长的全部二进制位均为数值位，没有符号位，相当于数的绝对值。</p></li><li><p>表示范围：n位二进制数：0 ~ 2^n^ - 1 </p></li><li><p>通常只有无符号的整数，而没有无符号小数</p></li></ul><h4 id="2-6-2-有符号数定点表示"><a href="#2-6-2-有符号数定点表示" class="headerlink" title="2.6.2. 有符号数定点表示"></a>2.6.2. 有符号数定点表示</h4><blockquote><p>数值部分也称尾数</p><p>用定点方式表示19.75时，需要把整数和小数部分分别单独保存</p><p>可用原码、反码、补码三种方式来表示定点整数和定点小数。还可以用移码表示定点整数</p><p>若真值为x，则用 [x]<del>原</del>、 [x]<del>反</del>、 [x]<del>补</del>、 [x]<del>移</del>、分别表示真值所对应的原码、反码、补码、移码</p></blockquote><ul><li>定点整数</li></ul><table><thead><tr><th>x0</th><th>x1</th><th>x2</th><th>…</th><th>xn</th><th></th></tr></thead><tbody><tr><td>符号位</td><td>数</td><td>值</td><td>部</td><td>分</td><td>小数点位置（隐含）</td></tr></tbody></table><ul><li>定点小数</li></ul><table><thead><tr><th>x0</th><th></th><th>x1</th><th>x2</th><th>…</th><th>xn</th></tr></thead><tbody><tr><td>符号位</td><td>小数点位置（隐含）</td><td>数</td><td>值</td><td>部</td><td>分</td></tr></tbody></table><p><strong>原码：用尾数表示真值的绝对值，符号位 0&#x2F;1 对应 正&#x2F;负</strong></p><ul><li>整数表示范围（机器字长n+1）：-(2^n^-1) &lt;&#x3D; x &lt;&#x3D; 2^n^-1<ul><li>真值0有+0和-0两种形式</li><li>8位表示整数+19：0 0010011</li></ul></li><li>小数表示范围（机器字长n+1）： -(1-2^-n^) &lt;&#x3D; x &lt;&#x3D; 1-2^-n^<ul><li>真值0有+0和-0两种形式</li><li>8位表示小数-0.75： 1 110000</li></ul></li></ul><p><strong>反码：若符号位为0，则反码与原码相同；若符号位为1，则数值位全部取反</strong></p><ul><li>整数&#x2F;小数 表示范围和原码相同</li></ul><p><strong>补码：正数的补码与原码相同；负数的补码&#x3D;反码末位+1（要考虑进位）</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机组成原理&quot;&gt;&lt;a href=&quot;#计算机组成原理&quot; class=&quot;headerlink&quot; title=&quot;计算机组成原理&quot;&gt;&lt;/a&gt;计算机组成原理&lt;/h1&gt;&lt;h2 id=&quot;1-Basic&quot;&gt;&lt;a href=&quot;#1-Basic&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="计组" scheme="http://example.com/categories/%E8%AE%A1%E7%BB%84/"/>
    
    
    <category term="计组" scheme="http://example.com/tags/%E8%AE%A1%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>oracle常用命令</title>
    <link href="http://example.com/2021/12/09/python+flask+oracle+docker+alpine/"/>
    <id>http://example.com/2021/12/09/python+flask+oracle+docker+alpine/</id>
    <published>2021-12-09T08:05:29.000Z</published>
    <updated>2022-07-24T08:18:32.462Z</updated>
    
    <content type="html"><![CDATA[<h3 id="和MySQL对比"><a href="#和MySQL对比" class="headerlink" title="和MySQL对比"></a>和MySQL对比</h3><ul><li><p>大小写: <strong>oracle</strong> 本身不区分大小写 (会把关键字全部转为大写再执行),但是对引号里的字符区分大小写。</p></li><li><p>主键自增: <strong>oracle</strong> 没有自带的主键自增, 需要先创建一个序列, 再创建一个触发器, 来实现主键自增</p></li></ul><h4 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前用户所有序列</span></span><br><span class="line">select * from user_objects where object_type=&#x27;SEQUENCE&#x27;;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看表的所有触发器</span></span><br><span class="line">select * from all_triggers where table_name=&#x27;表名&#x27;; </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建序列</span></span><br><span class="line">create sequence 序列名称(一般是表名_SEQ)</span><br><span class="line">start with 1  # 开始数字</span><br><span class="line">minvalue 1 # 最小值</span><br><span class="line">maxvalue   # 最大值</span><br><span class="line">cycle    # 是否循环 cycle / nocycle</span><br><span class="line">increment by 1  # 增长数字</span><br><span class="line">nocache # 不使用缓存</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除序列</span></span><br><span class="line">DROP SEQUENCE 序列名;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建触发器</span></span><br><span class="line">create or replace trigger 触发器名</span><br><span class="line">        before insert on 表名</span><br><span class="line">        referencing old as old new as new</span><br><span class="line">        for each row</span><br><span class="line">      begin</span><br><span class="line">        select 序列名.nextval</span><br><span class="line">          into :new.ID</span><br><span class="line">          from dual;</span><br><span class="line">      end 触发器名;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除触发器</span></span><br><span class="line">drop trigger 触发器名;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="基操"><a href="#基操" class="headerlink" title="基操"></a>基操</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查版本</span></span><br><span class="line">select * from v$version;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sqlalchemy_URI  注: 不用指定数据库</span></span><br><span class="line">oracle+cx_oracle://&#123;账号&#125;:&#123;密码&#125;@10.168.199.21:1521/?service_name=&#123;服务名&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Docker-Alpine安装oracle客户端"><a href="#Docker-Alpine安装oracle客户端" class="headerlink" title="Docker Alpine安装oracle客户端"></a><strong>Docker Alpine安装oracle客户端</strong></h3><ol><li><p>进入docker容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=容器名 镜像名:latest /bin/sh       由镜像创建容器并进入(只有镜像无容器)</span><br><span class="line">或</span><br><span class="line">docker exec -it 容器名 /bin/sh                          直接进入运行中的容器</span><br></pre></td></tr></table></figure></li><li><p>安装必要包</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk add libaio, libnsl, unzip</span><br></pre></td></tr></table></figure><ol start="3"><li>下载解压oracle basic包</li></ol><blockquote><p>需要对应服务器版本, 命令<code>select * from v$version;</code></p><p>各版本下载地址(32位): <a href="https://www.oracle.com/database/technologies/instant-client/linux-x86-32-downloads.html">https://www.oracle.com/database/technologies/instant-client/linux-x86-32-downloads.html</a></p><p>各版本下载地址(64位): <a href="https://www.oracle.com/database/technologies/instant-client/linux-x86-64-downloads.html">https://www.oracle.com/database/technologies/instant-client/linux-x86-64-downloads.html</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载basic免安装zip包, 需要登录验证, 所以下载链接不能复用, 要在上面链接中找对应版本下载</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">弄个单独目录存</span></span><br><span class="line">cd /usr/local</span><br><span class="line">mkdir oracle</span><br><span class="line">cd oracle</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">wget -c 支持断点续传</span></span><br><span class="line">wget -c https://download.oracle.com/otn/linux/instantclient/11204/instantclient-basic-linux.x64-11.2.0.4.0.zip</span><br><span class="line">?AuthParam=1644827926_6725c450378f19288cb3dc5d040b8a18</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">unzip 解压</span></span><br><span class="line">unzip instantclient-basic-linux.x64-11.2.0.4.0.zip?AuthParam\=1644827926_6725c450378f19288cb3dc5d040b8a18</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">整理下文件</span></span><br><span class="line">mv ./instantclient_11_2/* ./</span><br><span class="line">rmdir instantclient_11_2</span><br></pre></td></tr></table></figure><blockquote><p>unzip End-of-central-directory signature not found: 多半是下载的文件有问题, 重新下载就可以</p></blockquote><ol start="4"><li>添加环境变量</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过查看 /etc/profile 可以看到会加载 /etc/profile.d/目录下的 .sh结尾的文件</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">弄个单独的环境变量配置文件</span></span><br><span class="line">vi /etc/profile.d/oracle.sh</span><br><span class="line"> </span><br><span class="line">export ORACLE_HOME=/usr/local/oracle</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">export LD_LIBRARY_PATH=$ORACLE_HOME</span><br><span class="line">export PATH=$ORACLE_HOME:$PATH</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试下加上没有</span></span><br><span class="line">source /etc/profile</span><br><span class="line">echo $PATH</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出容器</span></span><br><span class="line">exit</span><br></pre></td></tr></table></figure><blockquote><p>注: 这里会有很多奇怪的报错, 以下为作者碰到的</p><p>报错1. Error loading shared library &#x2F;usr&#x2F;local&#x2F;oracle&#x2F;lib&#x2F;libclntsh.so: No such file or directory</p><p>(一开始是打算用软链接的, 但是没用, 直接复制就可以了, 不知道为什么)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/oracle/lib</span><br><span class="line">cp /usr/local/oracle/libclntsh.so.11.1 /usr/local/oracle/lib/libclntsh.so</span><br></pre></td></tr></table></figure><p>如果经过以上操作扔有此报错, 且是用supervisor启动的, 可能是因为supervisor没读到环境变量, 需要在supervisor配置文件中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">environment=ORACLE_HOME=&quot;/usr/local/oracle&quot;,NLS_LANG=&quot;AMERICAN_AMERICA.AL32UTF8&quot;,LD_LIBRARY_PATH=&quot;/usr/local/oracle&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注: supervisor添加环境变量时, 多个变量以<code>,</code>分隔, 单个变量多个值以<code>:</code>分隔</p><p>报错2.<br>Error loading shared library libnsl.so.1: No such file or directory (needed by &#x2F;usr&#x2F;local&#x2F;oracle&#x2F;lib&#x2F;libclntsh.so<br>(libnsl.so.1  或 libnsl.so) 建对应软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/lib/libnsl.so.2.0.0 /usr/lib/libnsl.so.1</span><br><span class="line">ln -s /usr/lib/libnsl.so.2.0.0 /usr/lib/libnsl.so</span><br></pre></td></tr></table></figure><p>报错3: cx_Oracle.DatabaseError: ORA-21561: OID generation faile</p><p>这是hosts文件有问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hostname  # 查看当前hostname</span><br><span class="line">把当前hostname加入到 /etc/hosts 文件的 127.0.0.1 即可</span><br></pre></td></tr></table></figure></blockquote><ol start="5"><li>提交镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a &#x27;laowang&#x27; 容器名 镜像名:1.0.0</span><br></pre></td></tr></table></figure><ol start="6"><li>换docker启动用的镜像版本号</li></ol><blockquote><p>注: 最后会发现环境变量没有加载, 原因未知</p><p>绕路解决方法: </p><ul><li>通过DockerFile直接运行容器的项目: 修改<code>Dockerfile</code>文件,  例: <code>CMD source /etc/profile &amp;&amp; gunicorn ....</code></li><li>通过DockerCompose启动的项目:  修改<code>docker-compose.yml</code>文件 例: <code>command: /bin/sh -c &quot;source /etc/profile &amp;&amp; gunicorn ....&quot;</code></li></ul><p><strong>python 直连测试代码</strong></p><p>import cx_Oracle<br>conn &#x3D; cx_Oracle.connect(“user&#x2F;passwd@host&#x2F;instance”)</p></blockquote><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><ul><li><p>报错ORA-00904: 后查到是数据库字段写错了, 和模型类的不一致</p></li><li><p>索引失效(partition of such index is in unusable state):</p><ul><li><pre><code class="sql">select index_name,status from user_indexes;  # 查失效索引alter index SYS_C00164313 rebuild;  # 重建索引</code></pre></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;和MySQL对比&quot;&gt;&lt;a href=&quot;#和MySQL对比&quot; class=&quot;headerlink&quot; title=&quot;和MySQL对比&quot;&gt;&lt;/a&gt;和MySQL对比&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;大小写: &lt;strong&gt;oracle&lt;/strong&gt; 本身不区分大小写</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo部署报错</title>
    <link href="http://example.com/2021/12/09/hexo%E9%83%A8%E7%BD%B2%E6%8A%A5%E9%94%99/"/>
    <id>http://example.com/2021/12/09/hexo%E9%83%A8%E7%BD%B2%E6%8A%A5%E9%94%99/</id>
    <published>2021-12-09T03:25:26.000Z</published>
    <updated>2022-02-20T09:12:08.047Z</updated>
    
    <content type="html"><![CDATA[<h3 id="报错内容"><a href="#报错内容" class="headerlink" title="报错内容"></a>报错内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fatal: in unpopulated submodule &#x27;.deploy_git&#x27;</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (/Users/krmac/myProjects/blog/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (node:events:390:28)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>直接删除 <code>.deploy_git</code>  重新 <code>hexo g</code> 生成即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;报错内容&quot;&gt;&lt;a href=&quot;#报错内容&quot; class=&quot;headerlink&quot; title=&quot;报错内容&quot;&gt;&lt;/a&gt;报错内容&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git代码迁移</title>
    <link href="http://example.com/2021/12/07/git%E4%BB%A3%E7%A0%81%E8%BF%81%E7%A7%BB/"/>
    <id>http://example.com/2021/12/07/git%E4%BB%A3%E7%A0%81%E8%BF%81%E7%A7%BB/</id>
    <published>2021-12-07T10:04:38.000Z</published>
    <updated>2022-02-20T09:12:08.047Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉所有分支</span></span><br><span class="line">git branch -r | grep -v &#x27;\-&gt;&#x27; | while read remote; do git branch --track &quot;$&#123;remote#origin/&#125;&quot; &quot;$remote&quot;; done</span><br><span class="line">git fetch --all</span><br><span class="line">git pull --all</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除旧源</span></span><br><span class="line">git remote rm origin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改为新源</span></span><br><span class="line">git remote add origin git@xxxx.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推代码 全部分支 / 标签</span></span><br><span class="line">git push --all</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git代码ssh方式部署linux服务器</title>
    <link href="http://example.com/2021/09/29/git%E4%BB%A3%E7%A0%81ssh%E6%96%B9%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://example.com/2021/09/29/git%E4%BB%A3%E7%A0%81ssh%E6%96%B9%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-09-29T02:30:47.000Z</published>
    <updated>2022-02-20T09:12:08.047Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1. 创建用户"></a>1. 创建用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建用户, -m 创建用户家目录</span></span><br><span class="line">useradd -m 用户名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改密码(在root用户下操作)</span></span><br><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure><h2 id="2-在git项目服务器添加ssh公钥"><a href="#2-在git项目服务器添加ssh公钥" class="headerlink" title="2. 在git项目服务器添加ssh公钥"></a>2. 在git项目服务器添加ssh公钥</h2><h2 id="3-在部署服务器用户家目录添加ssh密钥"><a href="#3-在部署服务器用户家目录添加ssh密钥" class="headerlink" title="3. 在部署服务器用户家目录添加ssh密钥"></a>3. 在部署服务器用户家目录添加ssh密钥</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.ssh/</span><br><span class="line">vi id_rsa  # 添加公钥</span><br><span class="line">vi id_rsa.pub  # 添加私钥</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果提示权限644不对(Permissions 0644 <span class="keyword">for</span> <span class="string">&#x27;~/.ssh/id_rsa&#x27;</span> are too open) 执行以下命令修改权限</span></span><br><span class="line">chmod 755 ~/.ssh/</span><br><span class="line">chmod 600 ~/.ssh/id_rsa ~/.ssh/id_rsa.pub</span><br><span class="line">chmod 644 ~/.ssh/known_hosts</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-创建用户&quot;&gt;&lt;a href=&quot;#1-创建用户&quot; class=&quot;headerlink&quot; title=&quot;1. 创建用户&quot;&gt;&lt;/a&gt;1. 创建用户&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>pycharm2vscode.md</title>
    <link href="http://example.com/2021/09/20/pycharm2vscode/"/>
    <id>http://example.com/2021/09/20/pycharm2vscode/</id>
    <published>2021-09-20T01:13:59.000Z</published>
    <updated>2022-02-20T09:12:08.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VSCode常用快捷键"><a href="#VSCode常用快捷键" class="headerlink" title="VSCode常用快捷键"></a>VSCode常用快捷键</h1><ul><li>全部折叠:  <code>cmd + k</code> + <code>cmd + 0</code></li></ul><h1 id="注"><a href="#注" class="headerlink" title="注:"></a>注:</h1><h2 id="关于导包"><a href="#关于导包" class="headerlink" title="关于导包"></a>关于导包</h2><ul><li>PyCharm 可以在项目指定目录右键指定为导包路径, VSCode需要在<code>.vscode/launch.json</code>内 <code>settings.configurations</code> 配置<code>env</code>时加上 <code>&quot;PYTHONPATH&quot;: &quot;$&#123;fileDirname&#125;/../smartbase:$&#123;fileDirname&#125;&quot;</code>多个目录通过 <code>:</code> 追加</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VSCode常用快捷键&quot;&gt;&lt;a href=&quot;#VSCode常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;VSCode常用快捷键&quot;&gt;&lt;/a&gt;VSCode常用快捷键&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;全部折叠:  &lt;code&gt;cmd + k&lt;/code&gt; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c++day01.md</title>
    <link href="http://example.com/2021/08/21/c-day01-md/"/>
    <id>http://example.com/2021/08/21/c-day01-md/</id>
    <published>2021-08-21T02:52:00.000Z</published>
    <updated>2022-02-21T06:20:53.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="download"><a href="#download" class="headerlink" title="download"></a>download</h1><ul><li><a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-posix/seh/?tdsourcetag=s_pctim_aiomsg"> Windows10下载MinGW </a><ul><li>点击页面中的<code>x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z</code> 进行下载</li><li>下载完成后把 <code>bin</code> 目录放入系统环境变量即可在终端使用 <code>c++</code> 命令进行编译 <code>.cpp</code> 源代码</li></ul></li></ul><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><ul><li><code>MyFirstApp</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello World! \n&quot;</span>; <span class="comment">// this will output to the console hello world</span></span><br><span class="line">    system(<span class="string">&quot;pause&gt;0&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编译</span></span><br><span class="line">g++ .\MyFirstApp.cpp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span><br><span class="line">.\a.exe</span><br></pre></td></tr></table></figure><ul><li><p>换行  <code>\n</code> 或 <code> &lt;&lt; endl;</code></p></li><li><p>编译命令 <code>g++ [source file] -o [output filename]</code></p></li></ul><h1 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h1><ul><li>命名<ul><li>构成: 下划线, 字母(区分大小写), 数字(不可数字开头)</li><li>一般用小驼峰命名法</li></ul></li></ul><p><strong>Data types</strong></p><table><thead><tr><th>类型</th><th>定义</th><th>size(bytes)</th><th>说明</th></tr></thead><tbody><tr><td>整数</td><td>int</td><td>4</td><td>-2147483648 to 2147483647</td></tr><tr><td>字符</td><td>char</td><td>1</td><td>单引号为字符 ‘a’</td></tr><tr><td>字符串</td><td>string</td><td></td><td>双引号为字符串 “character”</td></tr><tr><td>布尔</td><td>bool</td><td>1</td><td>true / false</td></tr><tr><td>浮点数</td><td>float</td><td>4</td><td></td></tr><tr><td>大浮点数</td><td>double</td><td>8</td><td></td></tr></tbody></table><p><strong>Data type overflow</strong></p><ul><li>变量的值超过其内存空间, 类似钟表指针, 13 点 = 1 点 (INT_MAX + 1 = INT_MIN)</li></ul><p><strong>ASCII table</strong></p><ul><li>asign characters to number (it’s for American)</li><li>ASCII extends: utf-(1-16)  (for others)</li><li>字符转换为ASCII数字 <code>(int)&#39;a&#39;</code> 和 <code>int(&#39;a&#39;)</code> 两种写法</li></ul><h1 id="Condition-Statement"><a href="#Condition-Statement" class="headerlink" title="Condition Statement"></a>Condition Statement</h1><p><strong>语法</strong></p><p><code>if()&#123;&#125;elif()&#123;&#125;else()&#123;&#125;</code></p><ul><li>注: 如果 <code>&#123;&#125;</code> 内只有一行代码, 可以不写 <code>&#123;&#125;</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//User enters side lengths of a triangle (a, b, c)</span></span><br><span class="line">    <span class="comment">//Program should write out whethre that triangle is</span></span><br><span class="line">    <span class="comment">//equilateral, isosceles or scalene</span></span><br><span class="line">    <span class="keyword">float</span> a, b, c;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a, b, c: &quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (a == b &amp;&amp; b == c)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Equilateral triangle&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a != b &amp;&amp; a != c &amp;&amp; b != c)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Scalene triangle&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Isosceles triangle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 执行优先级 从上到下</span></span><br><span class="line">    <span class="comment">// + - * / %</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">5</span> / <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 2</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">5.0</span> / <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 2.5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ++, --</span></span><br><span class="line">    <span class="keyword">int</span> counter = <span class="number">7</span>;</span><br><span class="line">    counter++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; counter &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    counter--;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; counter &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> counter2 = <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; counter2++ &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 7</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; counter2 &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 8</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ++counter2 &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>); <span class="comment">// clear console</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;, &gt;, &lt;=, &gt;=, ==, !=</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>, b = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; (a &gt; b) &lt;&lt; endl;  // 0 for false (1 for true)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &amp;&amp;, ||, !</span></span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">8</span>, d = <span class="number">9</span>;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; !(c == 5 &amp;&amp; b == 9);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优先级</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (c == <span class="number">8</span> &amp;&amp; d == <span class="number">4</span> + <span class="number">5</span>);  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// =, +=, -=, *=, /=, %=</span></span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line">    x += <span class="number">7</span>;  <span class="comment">//same as: x = x + 7</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三目"><a href="#三目" class="headerlink" title="三目"></a>三目</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hostUserNum, guestUserNum;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;HOST: &quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; hostUserNum;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Guest: &quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; guestUserNum;</span><br><span class="line"></span><br><span class="line">    (hostUserNum == guestUserNum)? <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Correct!&quot;</span>: <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Failed!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h1><blockquote><p>注意每个case后面必需接break退出, 因为程序只判断一次case条件, 进入一次后, 其他的case不会再判断, 会运行下面的所有case.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> num1, num2;</span><br><span class="line">    <span class="keyword">char</span> operation;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Caculator&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num1 &gt;&gt; operation &gt;&gt; num2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (operation)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:<span class="built_in">cout</span> &lt;&lt; num1 &lt;&lt; operation &lt;&lt; num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; num1 - num2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:<span class="built_in">cout</span> &lt;&lt; num1 &lt;&lt; operation &lt;&lt; num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; num1 + num2; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:<span class="built_in">cout</span> &lt;&lt; num1 &lt;&lt; operation &lt;&lt; num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; num1 * num2; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:<span class="built_in">cout</span> &lt;&lt; num1 &lt;&lt; operation &lt;&lt; num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; num1 / num2; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>:</span><br><span class="line">        <span class="keyword">bool</span> isNum1Int, isNum2Int;</span><br><span class="line">        isNum1Int = (<span class="keyword">int</span>(num1) == num1);</span><br><span class="line">        isNum2Int = (<span class="keyword">int</span>(num2) == num2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isNum1Int &amp;&amp; isNum2Int)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; num1 &lt;&lt; operation &lt;&lt; num2 &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; <span class="keyword">int</span>(num1) % <span class="keyword">int</span>(num2);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Not valid!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Not valid opeation!&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;download&quot;&gt;&lt;a href=&quot;#download&quot; class=&quot;headerlink&quot; title=&quot;download&quot;&gt;&lt;/a&gt;download&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://sourceforge.net/project</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>源码安装mysql</title>
    <link href="http://example.com/2021/07/26/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85mysql/"/>
    <id>http://example.com/2021/07/26/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85mysql/</id>
    <published>2021-07-26T02:46:45.000Z</published>
    <updated>2021-08-21T02:52:54.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="源码安装Mysql"><a href="#源码安装Mysql" class="headerlink" title="源码安装Mysql"></a>源码安装Mysql</h1><blockquote><p>系统: CentOS 8</p></blockquote><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h2><p><strong>官网找指定版本下载源码包</strong>   </p><blockquote><p> <a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-boost-5.7.34.tar.gz</span><br></pre></td></tr></table></figure><h2 id="2-解压编译"><a href="#2-解压编译" class="headerlink" title="2. 解压编译"></a>2. 解压编译</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zvxf mysql-boost-5.7.34.tar.gz</span><br><span class="line">cd mysql-5.7.34</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装cmake</span></span><br><span class="line">yum install cmake</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译</span></span><br><span class="line">cmake .</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译时命令 <code>cmake .</code> 报错汇总</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">报错: undefined symbol: archive_write_add_filter_zstd</span></span><br><span class="line">yum install libarchive</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">报错: No CMAKE_CXX_COMPILER could be found.</span></span><br><span class="line">yum install gcc-c++</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">报错: CMake Error at cmake/boost.cmake:88, 根据提示命令增加额外安装boost目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(也可自行下载安装Boost C++ 下载地址: https://sourceforge.net/projects/boost/files/boost/)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意 只能是1.59.0版本的boost</span></span><br><span class="line">mkdir -p /usr/local/boost</span><br><span class="line"></span><br><span class="line">cmake -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line">cd /usr/local/boost</span><br><span class="line">wget https://udomain.dl.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.gz</span><br><span class="line">tar -zvxf boost_1_59_0.tar.gz</span><br><span class="line">cmake . -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost/boost_1_59_0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">报错: CMake Error at cmake/ssl.cmake:63 (MESSAGE): Please install the appropriate openssl developer package</span></span><br><span class="line">gg</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二进制安装"><a href="#二进制安装" class="headerlink" title="二进制安装"></a>二进制安装</h1><h2 id="1-下载-1"><a href="#1-下载-1" class="headerlink" title="1. 下载"></a>1. 下载</h2><blockquote><p><a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p>Operating System: Linux-Generic</p><p>OS Version: Linux-Generic(glibc 2.12) (x86, 64-bit)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><blockquote><p>先查看下系统磁盘绑定情况, 再决定mysql data目录</p><p>命令: df -h</p></blockquote><h3 id="2-1-创建用户-用户组-数据目录"><a href="#2-1-创建用户-用户组-数据目录" class="headerlink" title="2.1. 创建用户, 用户组, 数据目录"></a>2.1. 创建用户, 用户组, 数据目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -g mysql -d /home/mysql mysql</span><br><span class="line">mkdir /home/mysql/data</span><br></pre></td></tr></table></figure><h3 id="2-2-下载-解压"><a href="#2-2-下载-解压" class="headerlink" title="2.2. 下载, 解压"></a>2.2. 下载, 解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/mysql</span><br><span class="line">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line">tar -zvxf mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="2-3-配置启动"><a href="#2-3-配置启动" class="headerlink" title="2.3. 配置启动"></a>2.3. 配置启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化配置</span></span><br><span class="line">./mysqld --user=mysql --basedir=/home/mysql --datadir=/home/mysql/data --initialize</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改basedir, datadir</span></span><br><span class="line">vim support-files/mysql.server</span><br><span class="line">--------------------------</span><br><span class="line">...</span><br><span class="line">basedir=/home/mysql</span><br><span class="line">datadir=/home/mysql/data</span><br><span class="line">...</span><br><span class="line">--------------------------</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接使命令可全局使用</span></span><br><span class="line">ln -s /home/mysql/bin/mysql /usr/bin/mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建配置文件</span></span><br><span class="line">vi /etc/my.cnf</span><br><span class="line">--------------------------</span><br><span class="line">...</span><br><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">basedir = /home/mysql</span><br><span class="line">datadir = /home/mysql/data</span><br><span class="line"></span><br><span class="line">character-set-client-handshake = FALSE</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_unicode_ci</span><br><span class="line">init_connect = &#x27;SET NAMES utf8mb4&#x27;</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">...</span><br><span class="line">--------------------------</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加开机启动</span></span><br><span class="line">cp /home/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加可执行权限</span></span><br><span class="line">chmod 755 /etc/init.d/mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看开机启动列表是否有mysqld, 没有就根据提示添加</span></span><br><span class="line">chkconfig --list mysqld</span><br><span class="line">chkconfig --add mysqld </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动mysql</span></span><br><span class="line">./support-files/mysql.server start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首次进入mysql 并修改root密码</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">alter user user() identified by <span class="string">&quot;修改的密码&quot;</span>;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看默认编码集</span></span><br><span class="line">show variables where variable_name like &#x27;%char%&#x27; or variable_name like &#x27;collation%&#x27;;</span><br><span class="line">+--------------------------+-----------------------------+</span><br><span class="line">| Variable_name            | Value                       |</span><br><span class="line">+--------------------------+-----------------------------+</span><br><span class="line">| character_set_client     | utf8mb4                     |</span><br><span class="line">| character_set_connection | utf8mb4                     |</span><br><span class="line">| character_set_database   | utf8mb4                     |</span><br><span class="line">| character_set_filesystem | binary                      |</span><br><span class="line">| character_set_results    | utf8mb4                     |</span><br><span class="line">| character_set_server     | utf8mb4                     |</span><br><span class="line">| character_set_system     | utf8                        |</span><br><span class="line">| character_sets_dir       | /home/mysql/share/charsets/ |</span><br><span class="line">| collation_connection     | utf8mb4_unicode_ci          |</span><br><span class="line">| collation_database       | utf8mb4_unicode_ci          |</span><br><span class="line">| collation_server         | utf8mb4_unicode_ci          |</span><br><span class="line">+--------------------------+-----------------------------+</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl 显示mysqld退出但实际没退出时</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p><font color="red">启动mysql可能出现的错误:</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">error <span class="keyword">while</span> loading shared libraries: libncurses.so.5</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">error <span class="keyword">while</span> loading shared libraries: libtinfo.so.5</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提示缺少依赖libncurses.so.5 和 libtinfo.so.5</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">但在 /usr/lib64 目录下是有 libtinfo.so.6.1 和 libncurses.so.6.1包的</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所以只需创建个软链接让mysql启动时去找到 *.5的包但实际是调用 *.6.1的包即可</span></span><br><span class="line"></span><br><span class="line">sudo ln -s /usr/lib64/libncurses.so.6.1 /usr/lib64/libncurses.so.5</span><br><span class="line">sudo ln -s /usr/lib64/libtinfo.so.6.1 /usr/lib64/libtinfo.so.5</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;源码安装Mysql&quot;&gt;&lt;a href=&quot;#源码安装Mysql&quot; class=&quot;headerlink&quot; title=&quot;源码安装Mysql&quot;&gt;&lt;/a&gt;源码安装Mysql&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;系统: CentOS 8&lt;/p&gt;
&lt;/blockquote</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Chapter-02</title>
    <link href="http://example.com/2021/06/22/Chapter-02/"/>
    <id>http://example.com/2021/06/22/Chapter-02/</id>
    <published>2021-06-22T05:42:54.000Z</published>
    <updated>2021-08-21T02:52:54.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络基础Chapter-2-物理层"><a href="#计算机网络基础Chapter-2-物理层" class="headerlink" title="计算机网络基础Chapter-2, 物理层"></a>计算机网络基础Chapter-2, 物理层</h1><h2 id="1-通信基础"><a href="#1-通信基础" class="headerlink" title="1. 通信基础"></a>1. 通信基础</h2><p><strong>物理层基本概念</strong></p><ul><li>物理层解决如何在连接各种计算机的传输媒体上<strong>传输数据比特流</strong>, 而不是指具体的传输媒体</li><li>主要任务: 确定与传输媒体接口有关的一些特性</li><li>机械特性:</li><li>电气特性:</li><li>功能特性:</li></ul><p><strong>数据通信基础</strong></p><p><img src="/../images/image-20210622135226744.png" alt="image-20210622135226744"></p><ul><li>数据: 传送信息的实体, 通常是有意义的符号序列</li><li>信号: 数据的电气&#x2F;电磁的表现, 是数据在传输过程中的存在形式<ul><li>数字信号: 代表消息的参数取值是离散的</li><li>模拟信号: 代表消息的参数取值是连续的 (正弦波)</li></ul></li><li>信源: 产生和发送数据的源头</li><li>信宿: 接收数据的终点</li><li>信道: <ul><li>按传输信号分类:</li><li>按</li></ul></li><li>三种通信方式:<ul><li>单工通信</li></ul></li></ul><h2 id="2-两个公式"><a href="#2-两个公式" class="headerlink" title="2. 两个公式"></a>2. 两个公式</h2><h2 id="3-看图说话"><a href="#3-看图说话" class="headerlink" title="3. 看图说话"></a>3. 看图说话</h2><h2 id="4-传输介质"><a href="#4-传输介质" class="headerlink" title="4. 传输介质"></a>4. 传输介质</h2><h2 id="5-物理层设备"><a href="#5-物理层设备" class="headerlink" title="5. 物理层设备"></a>5. 物理层设备</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机网络基础Chapter-2-物理层&quot;&gt;&lt;a href=&quot;#计算机网络基础Chapter-2-物理层&quot; class=&quot;headerlink&quot; title=&quot;计算机网络基础Chapter-2, 物理层&quot;&gt;&lt;/a&gt;计算机网络基础Chapter-2, 物理层&lt;/h1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Chapter-01</title>
    <link href="http://example.com/2021/06/16/Chapter-01/"/>
    <id>http://example.com/2021/06/16/Chapter-01/</id>
    <published>2021-06-16T14:05:05.000Z</published>
    <updated>2021-09-08T09:47:44.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络基础Chapter-1"><a href="#计算机网络基础Chapter-1" class="headerlink" title="计算机网络基础Chapter-1"></a>计算机网络基础Chapter-1</h1><h2 id="1-性能指标"><a href="#1-性能指标" class="headerlink" title="1. 性能指标"></a>1. 性能指标</h2><p><strong>速率</strong></p><ul><li> 即数据率或称数据传输率或比特率</li></ul><table><thead><tr><th>速率（千，兆，吉，太）(kb, Mb, Gb, Tb)</th><th>存储容量(KB, MB, GB, TB)（1Byte = 8bit）</th></tr></thead><tbody><tr><td>千 1kb/s = 10**3 b/s</td><td>1KB = 2**10B = 1024B = 1024 * 8 b</td></tr></tbody></table><p><strong>带宽</strong></p><ul><li> 指网络的通信线路传送数据的能力， 通常是指单位时间内从网络中的一点到另一点所能通过的 <strong>最高数据率</strong>。</li><li>  单位: <strong>比特每秒</strong>， b/s, kb/s, Mb/s, Gb/s, 网络设备所支持的最高速度</li></ul><p> <strong>吞吐量</strong></p><ul><li>表示<strong>单位时间</strong> 内通过 **某个网络(或信道、接口)**的数据量</li><li>单位： b/s, kb/s, Mb/s等</li><li>吞吐量受网络的带宽或网络的额定速率的限制</li></ul><p> <strong>时延</strong></p><ul><li>指数据（报文/分组/比特流）从网络（或链路）的一端传送到另一端所需的时间，也叫延迟，单位s</li></ul><ul><li>发送时延（传输时延）：从发送分组的第一个比特算起， 到该分组的最后一个比特发送完毕所需的时间</li></ul><p>$$<br>发送时延 = \frac{数据长度}{信道带宽}<br>$$</p><ul><li>传播时延：取决于电磁波的传播速度和链路长度</li></ul><p>$$<br>传播时延 = \frac{信道长度}{3 * 10^8}<br>$$</p><ul><li>排队时延：等待输出/输入链路可用</li><li>处理时延：检错、找出口</li></ul><p><strong>时延带宽积</strong></p><ul><li>又称为 <strong>以比特为单位的链路长度</strong>， 即 某段链路现在有多少比特， 是指链路中某一时刻的比特容量</li></ul><p>$$<br>时延带宽积(bit) = 传播时延(s) \times 带宽 (b/s)<br>$$</p><p><strong>往返时间RTT</strong></p><ul><li>从发送方发送数据开始， 到发送方收到接收方的确认（接收方收到数据后立即发送确认），总共经历的时延<ul><li>如 ping 的time = 33ms</li></ul></li><li>RTT越大，在收到确认之前，可以发送的数据越多</li><li>RTT包括<ul><li>往返传播时延 = 传播时延 * 2</li><li>末端处理时间</li></ul></li></ul><p> <strong>利用率</strong></p><ul><li>信道利用率</li></ul><p>$$<br>信道利用率 = \frac{有数据通过时间}{（有+无）数据通过时间}<br>$$</p><ul><li>网络利用率： 信道利用率加权平均值</li></ul><blockquote><p>加权平均值即将各数值乘以相应的权数，然后加总求和得到总体值，再除以总的单位数。加权平均值的大小不仅取决于总体中各单位的数值（变量值）的大小，而且取决于各数值出现的次数（频数），由于各数值出现的次数对其在平均数中的影响起着权衡轻重的作用，因此叫做权数。</p></blockquote><h2 id="2-分层结构"><a href="#2-分层结构" class="headerlink" title="2. 分层结构"></a>2. 分层结构</h2><ul><li>实体：第n层中的活动元素称为 <strong>n层实体</strong>。同一层的实体叫 <strong>对等实体</strong>。</li><li>协议：为进行网络中的 <strong>对等实体</strong> 数据交换而建立的规则、标准或约定称为网络协议。</li><li>接口（访问服务点SAP）： 上层使用下层服务的入口。</li><li>服务：下层为相邻上层提供的功能调用。</li></ul><h3 id="2-1-OSI参考模型"><a href="#2-1-OSI参考模型" class="headerlink" title="2.1. OSI参考模型"></a>2.1. OSI参考模型</h3><p>目的：支持 <strong>异构网络系统</strong> 的互联互通。</p><p>国际标准化组织（ISO) 于1984年提出开放系统互连（OSI）参考模型。</p><table><thead><tr><th>OSI 七层</th><th>说明</th></tr></thead><tbody><tr><td>应用层</td><td>数据子网（数据处理）</td></tr><tr><td>表示层</td><td>数据子网（数据处理）</td></tr><tr><td>会话层</td><td>数据子网（数据处理）</td></tr><tr><td>传输层</td><td></td></tr><tr><td>网络层</td><td>通信子网（数据通信）</td></tr><tr><td>数据链路层</td><td>通信子网（数据通信）</td></tr><tr><td>物理层</td><td>通信子网（数据通信）</td></tr></tbody></table><ul><li>应用层<ul><li>定义：所有能和用户交互产生网络流量的程序</li><li>典型应用层服务：<ul><li>文件传输：FTP</li><li>电子邮件：SMTP</li><li>万维网：HTTP</li></ul></li></ul></li><li>表示层<ul><li>定义：用于处理在两个通信系统中交换信息的表示方式（语法和语义）</li><li>功能：<ul><li>数据格式变换</li><li>数据加密解密</li><li>数据压缩和恢复</li></ul></li></ul></li><li>会话层<ul><li>定义：向表示层实体/用户进程提供<strong>建立连接</strong>并在连接上<strong>有序地传输</strong>数据。这是会话， 也是<strong>建立同步</strong>（SYN)</li><li>功能：<ul><li>建立、管理、终止会话</li><li>使用校验点可使会话在通信失效时从 <strong>校验点/同步点</strong> 继续恢复通信，实现数据同步。（适用于传输大文件）</li></ul></li></ul></li><li>传输层<ul><li>定义：负责该机中 <strong>两个进程</strong> 的通信，即<strong>端到端</strong> 的通信。传输意念是报文段或用户数据报。</li><li>功能：<ul><li>可靠传输、不可靠传输<ul><li>可靠：先建立连接，确认机制，如握手，再传输数据</li><li>不可靠：无建立连接，直接传数据</li></ul></li><li>差错控制</li><li>流量控制</li><li>复用分用<ul><li>复用：多个应用层进程可同时使用下面传输层的服务</li><li>分用：运输层把收到的信息分别交付给上面应用层中相应的进程</li></ul></li></ul></li></ul></li><li>网络层<ul><li>定义：主要任务是把分组从源端传到目的端，为分组交换网上的不同该机提供通信服务。网络层传输单位是数据报</li><li>功能：<ul><li>路由选择：最佳路径</li><li>流量控制：限制发送端</li><li>差错控制</li><li>拥塞控制：若所有结点都来不及接受分组，而要丢弃大量分组的话，网络就处于拥塞状态。因此要采取一定措施，缓解这种拥塞。</li></ul></li></ul></li><li>数据链路层<ul><li>定义：主要任务是把网络层传下来的数据报组装成帧。传输单位是帧。</li><li>功能：<ul><li>成帧（定义帧的开始和结束）</li><li>差错控制：帧错+位错</li><li>流量控制：限制发送端速度</li><li>访问（接入）控制：控制对信道的访问</li></ul></li></ul></li><li>物理层<ul><li>定义：主要任务是在物理媒体上实现比特流的透明传输。传输单位是比特。</li><li>透明传输：指不管所传数据是什么样的比特组合，都应当能够在链路上传送。</li><li>功能：<ul><li>定义接口特性</li><li>定义传输模式<ul><li>单工、半双工、双工</li></ul></li><li>定义传输速率</li><li>比特同步</li><li>比特编码：用什么电压表示1， 什么电压表示0</li></ul></li></ul></li></ul><h3 id="2-2-TCP-IP模型"><a href="#2-2-TCP-IP模型" class="headerlink" title="2.2. TCP/IP模型"></a>2.2. TCP/IP模型</h3><table><thead><tr><th>TCP/IP 四层</th><th>协议栈</th></tr></thead><tbody><tr><td>应用层</td><td>HTTP，FTP，DNS，SMTP</td></tr><tr><td>传输层</td><td>TCP，UDP</td></tr><tr><td>网际层</td><td>IP</td></tr><tr><td>网络接口层</td><td>Ethernet, ATM, Frame Relay</td></tr></tbody></table><h3 id="2-3-OSI与TCP-IP对比"><a href="#2-3-OSI与TCP-IP对比" class="headerlink" title="2.3. OSI与TCP/IP对比"></a>2.3. OSI与TCP/IP对比</h3><ul><li>相同点<ul><li>都分层</li><li>基于独立的协议栈的概念</li><li>可以实现异构网络互联</li></ul></li><li>不同点<ul><li>OSI定义三点：服务、协议、接口</li><li>OSI先出现，参考模型先于协议发明，不偏向特定协议</li><li>TCP/IP设计之初就考虑到异构网互联问题，将IP作为重要层次</li></ul></li></ul><table><thead><tr><th></th><th>OSI</th><th>TCP/IP</th></tr></thead><tbody><tr><td>网络层</td><td>无连接 + 面向连接</td><td>无连接</td></tr><tr><td>传输层</td><td>面向连接</td><td>无连接 + 面向连接</td></tr></tbody></table><p><strong>面向连接</strong>分为三个阶段：</p><ol><li>建立连接，在此阶段，发出一个建立连接的请求。</li><li>只有连接成功建立之后，才能开始传输数据， 这是第二阶段</li><li>当数据传输完毕必须释放连接</li></ol><p><strong>无连接</strong>直接进行数据传输</p><h3 id="2-4-5层参考模型"><a href="#2-4-5层参考模型" class="headerlink" title="2.4. 5层参考模型"></a>2.4. 5层参考模型</h3><table><thead><tr><th>5层参考模型</th><th>说明</th><th>协议</th></tr></thead><tbody><tr><td>应用层</td><td>支持各种网络应用</td><td>FTP、SMTP、HTTP</td></tr><tr><td>传输层</td><td>进程-进程的数据传输</td><td>TCP、UDP</td></tr><tr><td>网络层</td><td>源主机到目的主机的数据分组路由与转发</td><td>IP、ICMP、OSPF</td></tr><tr><td>数据链路层</td><td>把网络层传下来的数据报组装成帧</td><td>Ethernet、PPP</td></tr><tr><td>物理层</td><td>比特传输</td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机网络基础Chapter-1&quot;&gt;&lt;a href=&quot;#计算机网络基础Chapter-1&quot; class=&quot;headerlink&quot; title=&quot;计算机网络基础Chapter-1&quot;&gt;&lt;/a&gt;计算机网络基础Chapter-1&lt;/h1&gt;&lt;h2 id=&quot;1-性能指标&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="网络基础" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>配置frp内网穿透</title>
    <link href="http://example.com/2021/06/03/%E9%85%8D%E7%BD%AEfrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>http://example.com/2021/06/03/%E9%85%8D%E7%BD%AEfrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</id>
    <published>2021-06-03T01:34:18.000Z</published>
    <updated>2022-04-10T12:55:59.912Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-下载对应包"><a href="#1-下载对应包" class="headerlink" title="1. 下载对应包"></a>1. 下载对应包</h3><blockquote><p><a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p></blockquote><p>在git上找到对应自己系统版本的链接, 并下载到服务器</p><p>例:</p><p><code>wget https://github.com/fatedier/frp/releases/download/v0.37.0/frp_0.37.0_linux_386.tar.gz</code></p><h3 id="2-解压缩"><a href="#2-解压缩" class="headerlink" title="2. 解压缩"></a>2. 解压缩</h3><p><code>tar -zvxf frp_0.37.0_linux_386.tar.gz</code></p><h3 id="3-修改服务器配置"><a href="#3-修改服务器配置" class="headerlink" title="3. 修改服务器配置"></a>3. 修改服务器配置</h3><blockquote><p>后台运行: <code>nohup ./frps -c frps.ini &gt;/dev/null 2&gt;&amp;1 &amp;</code></p><p>bind_port FRP使用端口</p><p>v_host_http_port 外部访问端口(可配置nginx proxy_pass转发)</p></blockquote><ul><li><code>vi frps.ini</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">token = 12345678</span><br><span class="line">vhost_http_port = 80</span><br></pre></td></tr></table></figure><ul><li>启动: <code>./frps -c frps.ini</code></li></ul><h3 id="4-修改客户端配置"><a href="#4-修改客户端配置" class="headerlink" title="4. 修改客户端配置"></a>4. 修改客户端配置</h3><blockquote><p>客户端下载同服务端</p></blockquote><ul><li><code>vi frpc.ini</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 106.14.30.129</span><br><span class="line">server_port = 7000</span><br><span class="line">token = 12345678</span><br><span class="line">tls_enable = true</span><br><span class="line"></span><br><span class="line">[krkdwc]</span><br><span class="line">type = http</span><br><span class="line">custom_domains = dev.bogwang.cn</span><br><span class="line">local_port = 5000</span><br></pre></td></tr></table></figure><ul><li>启动: <code>./frpc -c frpc.ini</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-下载对应包&quot;&gt;&lt;a href=&quot;#1-下载对应包&quot; class=&quot;headerlink&quot; title=&quot;1. 下载对应包&quot;&gt;&lt;/a&gt;1. 下载对应包&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/fatedie</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>mac + python + oracle.md</title>
    <link href="http://example.com/2021/06/01/mac%E4%B8%8B%E4%BD%BF%E7%94%A8oracle/"/>
    <id>http://example.com/2021/06/01/mac%E4%B8%8B%E4%BD%BF%E7%94%A8oracle/</id>
    <published>2021-06-01T01:56:00.000Z</published>
    <updated>2021-06-13T14:33:29.293Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Oracle 字符串只能用单引号</p></blockquote><h3 id="mac安装通过docker安装使用oracle"><a href="#mac安装通过docker安装使用oracle" class="headerlink" title="mac安装通过docker安装使用oracle"></a>mac安装通过docker安装使用oracle</h3><blockquote><p>参考: <a href="https://github.com/MaksymBilenko/docker-oracle-12c">https://github.com/MaksymBilenko/docker-oracle-12c</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像</span></span><br><span class="line">docker pull quay.io/maksymbilenko/oracle-12c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建容器并运行</span></span><br><span class="line">docker run -d -p 8080:8080 -p 1521:1521 --name=oracle quay.io/maksymbilenko/oracle-12c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接配置</span></span><br><span class="line">hostname: localhost</span><br><span class="line">port: 1521</span><br><span class="line">sid: xe</span><br><span class="line">service name: xe</span><br><span class="line">username: system</span><br><span class="line">password: oracle</span><br></pre></td></tr></table></figure><h3 id="基操"><a href="#基操" class="headerlink" title="基操"></a>基操</h3><ul><li>查看数据库版本: <code>select * from v$version;</code></li></ul><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><ul><li>创建用户:  <code>create user 用户名 identified by 密码</code><ul><li>例: <code>create user test identified by test</code></li></ul></li></ul><blockquote><p>第一次创建<code>create user &#39;root&#39; identified by &#39;123456&#39;</code> </p><p>提示 missing user or role name 是因为此处用户名不需要引号</p><p>修改后提示无效密码, 同样密码也不需要引号</p></blockquote><ul><li>修改密码: <code>alter user 用户名 identified by 新密码</code></li></ul><h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><blockquote><p>oracle为兼容以前版本，提供三种标准角色（role）:connect, resource和dba.</p></blockquote><ol><li>connect role(连接角色)</li></ol><p>–临时用户，特指不需要建表的用户，通常只赋予他们connect role. </p><p>–connect是使用oracle简单权限，这种权限只对其他用户的表有访问权限，包括select&#x2F;insert&#x2F;update和delete等。</p><p>–拥有connect role 的用户还能够创建表、视图、序列（sequence）、簇（cluster）、同义词(synonym)、回话（session）和其他 数据的链（link）</p><ol start="2"><li>resource role(资源角色)</li></ol><p>–更可靠和正式的数据库用户可以授予resource role。</p><p>–resource提供给用户另外的权限以创建他们自己的表、序列、过程(procedure)、触发器(trigger)、索引(index)和簇(cluster)。</p><ol start="3"><li>dba role(数据库管理员角色)</li></ol><p>–dba role拥有所有的系统权限</p><p>–包括无限制的空间限额和给其他用户授予各种权限的能力。system由dba用户拥有</p><p>除了前面三种系统角色—-connect、resource和dba，用户还可以在oracle创建自己的role。</p><p>用户创建的role可以由表或系统权限或两者的组合构成。</p><p>为了创建role，用户必须具有create role系统权限。</p><ol><li><p>创建角色: <code>create role 角色名;</code></p></li><li><p>授权角色:  <code>grant select on 表名 to 角色名;</code></p></li><li><p>删除角色: <code>drop role 角色名;</code></p></li></ol><h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><ul><li>授权: <code>grant connect, resource to 用户名;</code></li><li>撤消:  <code>revoke connect, resource from 用户名;</code></li></ul><h3 id="库表"><a href="#库表" class="headerlink" title="库表"></a>库表</h3><blockquote><p>创建表时提示:  <code>no privileges on tablespace USERS</code></p><p>执行: <code>alter user 库名 quota unlimited on users;</code></p></blockquote><ul><li>创建数据库: <code>create tablespace 表间名 datafile &#39;数据文件名&#39; size 表空间大小;</code><ul><li>例: <code>create tablespace TEST datafile &#39;test&#39; size 20M;</code></li></ul></li><li>查看建表语句: <code>select dbms_metadata.get_ddl(&#39;TABLE&#39;,&#39;USERINFO&#39;) from dual;</code></li></ul><h3 id="错误汇总"><a href="#错误汇总" class="headerlink" title="错误汇总"></a>错误汇总</h3><ul><li>找不到 <code>libocci.dylib</code></li></ul><p>参考: <code>https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html</code> 根据提示要安装 <code>Oracle Instant Client</code> </p><p>下载 <code>http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html</code> 的<code>Basic Package</code> </p><p>下载解压后在环境变量中添加 <code>export DYLD_LIBRARY_PATH=解压文件目录</code></p><ul><li>ORA-12541</li></ul><p>服务未启动</p><ul><li>ORA-12505</li></ul><p>报错时的配置: <code>oracle+cx_oracle://test:123456@localhost:1521/TEST</code></p><p>连接配置不是具体到库, 而是到服务名, 修改为: <code>oracle+cx_oracle://test:123456@localhost:1521/xe</code></p><blockquote><p>服务名查看命令: <code>select INSTANCE_NAME from v$instance;</code></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Oracle 字符串只能用单引号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;mac安装通过docker安装使用oracle&quot;&gt;&lt;a href=&quot;#mac安装通过docker安装使用oracle&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>cookiecutter-flask-restful使用笔记</title>
    <link href="http://example.com/2021/04/02/cookiecutter-flask-restful%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/04/02/cookiecutter-flask-restful%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2021-04-02T09:40:17.000Z</published>
    <updated>2021-06-13T14:33:29.292Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="flask-cookiecutter-restful-使用"><a href="#flask-cookiecutter-restful-使用" class="headerlink" title="flask-cookiecutter-restful 使用"></a>flask-cookiecutter-restful 使用</h1><h2 id="一-本地开发准备"><a href="#一-本地开发准备" class="headerlink" title="一. 本地开发准备"></a>一. 本地开发准备</h2><h3 id="1-源码安装python-3-7-10"><a href="#1-源码安装python-3-7-10" class="headerlink" title="1. 源码安装python-3.7.10"></a>1. 源码安装python-3.7.10</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://www.python.org/ftp/python/3.7.10/Python-3.7.10.tar.xz</span><br><span class="line">tar -zxvf Python-3.7.10.tar.xz</span><br><span class="line">cd Python-3.7.10/Modules</span><br><span class="line">vim Setup.dist</span><br></pre></td></tr></table></figure><p>搜索:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:/ssl</span><br></pre></td></tr></table></figure><p>将以下内容取消注释:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Socket module helper <span class="keyword">for</span> socket(2)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">_socket socketmodule.c</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Socket module helper <span class="keyword">for</span> SSL support; you must comment out the other</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">socket line above, and possibly edit the SSL variable:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SSL=/usr/local/ssl</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">_ssl _ssl.c \</span></span><br><span class="line"><span class="language-bash"><span class="comment"># -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \</span></span></span><br><span class="line"><span class="language-bash"><span class="comment"># -L$(SSL)/lib -lssl -lcrypto</span></span></span><br></pre></td></tr></table></figure><p>取消注释如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Socket module helper <span class="keyword">for</span> socket(2)</span></span><br><span class="line">_socket socketmodule.c</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Socket module helper <span class="keyword">for</span> SSL support; you must comment out the other</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">socket line above, and possibly edit the SSL variable:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SSL=/usr/local/ssl</span></span><br><span class="line">_ssl _ssl.c \</span><br><span class="line">-DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \</span><br><span class="line"><span class="meta prompt_">-L$</span><span class="language-bash">(SSL)/lib -lssl -lcrypto</span></span><br></pre></td></tr></table></figure><p>返回Python源码根目录编译安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ../</span><br><span class="line">./configure --prefix=/usr/local/python3.7.10 --enable-loadable-sqlite-extensions</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>将 &#x2F;usr&#x2F;local&#x2F;python3.6&#x2F;bin 加入 PATH， 在<code>/etc/profile</code>文件后追加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>追回内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/usr/local/python3.7/bin:$PATH</span><br></pre></td></tr></table></figure><p>设置python, pip别名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias python3.7=/usr/local/python3.7.10/bin/python3</span><br><span class="line">alias pip3.7=/usr/local/python3.7.10/bin/pip3</span><br></pre></td></tr></table></figure><h3 id="2-使用cookiecutter创建项目"><a href="#2-使用cookiecutter创建项目" class="headerlink" title="2. 使用cookiecutter创建项目"></a>2. 使用cookiecutter创建项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install cookiecutter</span><br><span class="line"></span><br><span class="line">cookiecutter https://github.com/karec/cookiecutter-flask-restful</span><br></pre></td></tr></table></figure><h3 id="3-pipenv-创建虚拟环境"><a href="#3-pipenv-创建虚拟环境" class="headerlink" title="3. pipenv 创建虚拟环境"></a>3. pipenv 创建虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">pip install pipenv</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新</span></span><br><span class="line">pip install --user --upgrade pipenv</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Python版本创建虚拟环境</span></span><br><span class="line">pipenv --python 3.7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入虚拟环境</span></span><br><span class="line">pipenv shell</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装包</span></span><br><span class="line">pipenv install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line">pipenv install -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="4-数据库"><a href="#4-数据库" class="headerlink" title="4. 数据库"></a>4. 数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地创建相关库</span></span><br><span class="line">CREATE DATABASE `aipms` /*!40100 DEFAULT CHARACTER SET utf8mb4 */</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">项目配置数据库, 修改.<span class="built_in">env</span></span></span><br><span class="line">DATABASE_URI=mysql+pymysql://root:123456@localhost:3306/aipms?charset=utf8mb4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进虚拟环境</span></span><br><span class="line">pipenv shell</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成迁移文件</span></span><br><span class="line">flask db migrate -m &#x27;init migration&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新到数据库</span></span><br><span class="line">flask db upgrate</span><br></pre></td></tr></table></figure><h3 id="5-接口测试"><a href="#5-接口测试" class="headerlink" title="5. 接口测试"></a>5. 接口测试</h3><ul><li><p>注册</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl --location --request POST &#x27;http://127.0.0.1:5002/auth/register&#x27; \</span><br><span class="line">--header &#x27;Content-Type: application/json&#x27; \</span><br><span class="line">--data-raw &#x27;&#123;</span><br><span class="line">    &quot;username&quot;: &quot;admin&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;admin&quot;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure></li><li><p>登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl --location --request POST &#x27;http://127.0.0.1:5002/auth/login&#x27; \</span><br><span class="line">--header &#x27;Content-Type: application/json&#x27; \</span><br><span class="line">--data-raw &#x27;&#123;</span><br><span class="line">    &quot;username&quot;: &quot;admin&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;admin&quot;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-git"><a href="#6-git" class="headerlink" title="6. git"></a>6. git</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git初始化</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加源</span></span><br><span class="line">git remote add origin git@*****</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取代码, 有冲突解决冲突</span></span><br><span class="line">git pull</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换新分支</span></span><br><span class="line">git checkout -b feature-init</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add 所有</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">commit</span></span><br><span class="line">git commit -m &#x27;init&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分支推送到远程库</span></span><br><span class="line">git push --set-upstream origin feature-init</span><br></pre></td></tr></table></figure><h2 id="二-部署"><a href="#二-部署" class="headerlink" title="二. 部署"></a>二. 部署</h2><h3 id="1-gunicorn"><a href="#1-gunicorn" class="headerlink" title="1. gunicorn"></a>1. gunicorn</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install gunicorn</span><br></pre></td></tr></table></figure><h3 id="2-docker"><a href="#2-docker" class="headerlink" title="2. docker"></a>2. docker</h3><ul><li>安docker</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install docker</span><br></pre></td></tr></table></figure><ul><li>安docker-compose</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install docker-compose</span><br></pre></td></tr></table></figure><ul><li><p>登录docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure></li><li><p>拉取基础Image</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull python:3.7.10-alpine</span><br></pre></td></tr></table></figure></li><li><p>创建容器并进入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=container_name python:3.7.10-alpine /bin/sh</span><br></pre></td></tr></table></figure></li><li><p>配置dockerfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>从dockerfile启动项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t container_name ./Dockerfile</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;flask-cookiecutter-restful-使用&quot;&gt;&lt;a href=&quot;#flask-cookiecutter-restful-使用&quot; class=&quot;headerlink&quot; title=&quot;flask-cookiecutter-re</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Flask-Migrate报错</title>
    <link href="http://example.com/2021/03/25/Flask-Migrate%E6%8A%A5%E9%94%99/"/>
    <id>http://example.com/2021/03/25/Flask-Migrate%E6%8A%A5%E9%94%99/</id>
    <published>2021-03-25T09:06:06.000Z</published>
    <updated>2021-06-13T14:33:29.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask-Migrate-pgsql-执行报错psycopg2-errors-DuplicateTable-relation-“user”-already-exists"><a href="#Flask-Migrate-pgsql-执行报错psycopg2-errors-DuplicateTable-relation-“user”-already-exists" class="headerlink" title="Flask-Migrate  + pgsql 执行报错psycopg2.errors.DuplicateTable: relation “user” already exists"></a>Flask-Migrate  + pgsql 执行报错psycopg2.errors.DuplicateTable: relation “user” already exists</h1><p><strong>问题出现</strong>: 全新项目, 本来是打算用mysql, 后来换pgsql, 一开始用mysql时执行过 <code>flask db migrate / flask db upgrade</code>, 测试ORM,, 换成pgsql后再执行<code>flask db upgrade</code>出现如上报错, 看字面意思是表已存在, 可pgsql中并没有此表!</p><p><strong>原因</strong>: 一开始执行 <code>flask db migrate</code> 时 alembic 已经创建了记录(versions目录下的.py文件), 也就是说对 alembic 来说是已经创建过数据表了, 在sql语句执行前就被报错拦截住了, 所以即使数据库没有user表, 报错也提示表已存在!</p><p><strong>解决</strong>: 直接把 versions 目录下记录全部删除, 重新执行 <code>flask db upgrade </code> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Flask-Migrate-pgsql-执行报错psycopg2-errors-DuplicateTable-relation-“user”-already-exists&quot;&gt;&lt;a href=&quot;#Flask-Migrate-pgsql-执行报错psycopg2-er</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx</title>
    <link href="http://example.com/2021/03/18/nginx/"/>
    <id>http://example.com/2021/03/18/nginx/</id>
    <published>2021-03-18T09:10:44.000Z</published>
    <updated>2021-06-13T14:33:29.293Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nginx服务更新证书"><a href="#nginx服务更新证书" class="headerlink" title="nginx服务更新证书"></a>nginx服务更新证书</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">nginx配置文件: /etc/nginx/sites_enabled</span><br><span class="line">server &#123;</span><br><span class="line">    listen  443;</span><br><span class="line">    server_name djdeveloper.cn *.djdeveloper.cn;</span><br><span class="line">    root    /var/www/djdeveloper.cn;</span><br><span class="line">    autoindex   off;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/djdeveloper.full.crt;</span><br><span class="line">    ssl_certificate_key  /etc/nginx/ssl/djdeveloper.key;</span><br><span class="line"></span><br><span class="line">    ssl_session_cache       shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout     5m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nginx证书: /etc/nginx/ssl</span><br><span class="line"></span><br><span class="line">cp **.full.crt **.full.crt.bak</span><br><span class="line">cp **.key **.key.bak</span><br><span class="line"></span><br><span class="line">vim **.full.crt cp</span><br><span class="line">vim **.key cp</span><br><span class="line"></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="配置跨域"><a href="#配置跨域" class="headerlink" title="配置跨域:"></a>配置跨域:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">位置: http&#123;这里, server&#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line">add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class="line">add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span><br></pre></td></tr></table></figure><h3 id="nginx-502-错误初步排查"><a href="#nginx-502-错误初步排查" class="headerlink" title="nginx 502 错误初步排查"></a>nginx 502 错误初步排查</h3><ul><li>nginx 配置文件默认目录 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</li><li>配置文件中有 include * 为包含的配置文件</li><li>access_log off 为关闭日志, 开启后为 access_log &#x2F;var&#x2F;www&#x2F;ccd.log</li><li>如果在日志文件中能看到请求说明与nginx无关, 是项目的问题</li><li>nginx -s reload</li><li>nginx -t 检查配置文件语法是否正确</li><li>lsof -i:port1 检查端口使用 CLOSE_WAIT 时看 port1 -&gt; port2 是port2出了问题</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;nginx服务更新证书&quot;&gt;&lt;a href=&quot;#nginx服务更新证书&quot; class=&quot;headerlink&quot; title=&quot;nginx服务更新证书&quot;&gt;&lt;/a&gt;nginx服务更新证书&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>微信公众号</title>
    <link href="http://example.com/2021/03/18/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    <id>http://example.com/2021/03/18/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/</id>
    <published>2021-03-18T09:09:33.000Z</published>
    <updated>2022-07-24T08:18:32.556Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redirect-uri错误"><a href="#redirect-uri错误" class="headerlink" title="redirect_uri错误"></a>redirect_uri错误</h3><ol><li><p>首先确定<code>基本配置</code>中的 appID, appSecret, 服务器配置是否启用, 服务器地址, token是否都配置正确.</p></li><li><p><code>接口权限</code>-<code>网页授权获取用户基本信息</code>-<code>修改</code></p></li></ol><ul><li>注意: 这里有个大坑, 使用的url最好是直接域名, 如果有层级要保证项目实际使用的url全是在这里填写的层级之下的, 不然即使这里修改成功, 还是会报redirect_uri错误</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;redirect-uri错误&quot;&gt;&lt;a href=&quot;#redirect-uri错误&quot; class=&quot;headerlink&quot; title=&quot;redirect_uri错误&quot;&gt;&lt;/a&gt;redirect_uri错误&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先确定&lt;code&gt;基本配</summary>
      
    
    
    
    <category term="微信公众号" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
    
    <category term="bug" scheme="http://example.com/tags/bug/"/>
    
  </entry>
  
</feed>
